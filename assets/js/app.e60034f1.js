"use strict";(self.webpackChunkgahoochen_blog=self.webpackChunkgahoochen_blog||[]).push([[3524],{939:(i,s,a)=>{a.d(s,{B:()=>$});var n={};a.r(n),a.d(n,{default:()=>m});var l={};a.r(l);var e={};a.r(e);var t={};a.r(t),a.d(t,{default:()=>y});var h={};a.r(h);var p={};a.r(p),a.d(p,{default:()=>F});var k={};a.r(k),a.d(k,{default:()=>D});var r={};a.r(r);var d={};a.r(d);var g={};a.r(g),a.d(g,{default:()=>L});var c={};a.r(c),a.d(c,{default:()=>G});var A={};a.r(A),a.d(A,{default:()=>U});var o=a(9345);const m={enhance:({app:i})=>{i.component("GitContributors",o.B)}},y=(0,a(4898).re)({enhance:({app:i})=>{}});var B=a(5214),u=a(6063),C=a(3718);const F={enhance:({app:i})=>{i.component("CodeTabs",u.S),i.component("Tabs",C.t)}};var v=a(5770),b=a(5058);const D={enhance:({app:i})=>{i.component("CodeDemo",v.A),i.component("MdDemo",b.A)}};var f=a(4937),E=a(829),x=a(9478),w=a(7481),T=a(1625),S=a(4089),I=a(1817);const L={enhance:({app:i})=>{(0,w.L)("VPIcon")||i.component("VPIcon",i=>(0,S.h)(I.G,{type:"iconify",prefix:"fa6-solid:",...i}))},setup:()=>{(0,T.r9V)("https://cdn.jsdelivr.net/npm/iconify-icon@2")}};var P=a(1618),O=a(283),J=a(5906);a(2055);const G={enhance:({app:i})=>{(0,w.L)("Badge")||i.component("Badge",O.A),(0,w.L)("VPCard")||i.component("VPCard",J.A)},setup:()=>{},rootComponents:[]};var N=a(280),z=a(6602),R=a(4142),W=a(196),_=a(9441),j=a(7884),M=a(9601),V=a(1090),q=a(388),H=a(660);a(2598),a(8977),a(184),a(393),(0,V.M_)(i=>{const s=i.title,a=i.index??!0,n=i.icon;return a?{title:s,content:n?()=>[(0,S.h)((0,S.g2)("VPIcon"),{icon:n,sizing:"both"}),s]:null,order:i.order,index:i.index}:null});const U={enhance:({app:i,router:s})=>{const{scrollBehavior:a}=s.options;s.options.scrollBehavior=async(...i)=>(await _.s.wait(),a(...i)),(0,j.i)(i),i.component("BloggerInfo",q.l),i.component("SocialMedias",q.k)},setup:()=>{(0,j.s)(),(0,j.a)(),(0,H.su)()},layouts:{Layout:M.L,NotFound:M.N,Blog:q.B}},$=[n,l,e,t,h,B,p,k,r,d,f,E,x,g,P,c,N,z,R,W,A].map(i=>i.default).filter(Boolean)},1709:(i,s,a)=>{a.d(s,{l:()=>n});const n=JSON.parse('{"category":{"/":{"path":"/category/","map":{}}},"tag":{"/":{"path":"/tag/","map":{}}}}')},2878:(i,s,a)=>{a.d(s,{P:()=>n});const n={}},3781:(i,s,a)=>{a.d(s,{U:()=>n});const n=JSON.parse('{"article":{"/":{"path":"/article/","indexes":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45]}},"star":{"/":{"path":"/star/","indexes":[]}},"timeline":{"/":{"path":"/timeline/","indexes":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45]}}}')},4776:(i,s,a)=>{a.d(s,{M:()=>n});const n=JSON.parse('["/programming-languages/common-concepts/01-number-systems-bitwise-principles.html","/programming-languages/common-concepts/","/programming-languages/c/08-bitwise-operations.html","/programming-languages/cpp/01-getting-started.html","/programming-languages/cpp/02-enhanced-data-types.html","/programming-languages/cpp/03-io-operations.html","/programming-languages/cpp/04-enhanced-functions.html","/programming-languages/cpp/05-classes-objects.html","/programming-languages/cpp/06-constructors-destructors.html","/programming-languages/cpp/07-inheritance-polymorphism.html","/programming-languages/cpp/08-operator-overloading.html","/programming-languages/cpp/09-templates.html","/programming-languages/cpp/10-standard-library-containers.html","/programming-languages/cpp/11-standard-library-algorithms.html","/programming-languages/cpp/12-exception-handling.html","/programming-languages/cpp/13-raii-resource-management.html","/programming-languages/cpp/14-namespaces.html","/programming-languages/cpp/15-stl-algorithms.html","/programming-languages/cpp/16-memory-model.html","/programming-languages/cpp/17-multithreading.html","/programming-languages/cpp/18-move-semantics.html","/programming-languages/cpp/19-smart-pointers.html","/programming-languages/cpp/20-modern-cpp-features.html","/programming-languages/c/01-first-program.html","/programming-languages/c/02-variables-data-types.html","/programming-languages/c/03-operators.html","/programming-languages/c/04-control-statements.html","/programming-languages/c/05-loops.html","/programming-languages/c/06-practice-summary.html","/programming-languages/c/07-functions-arrays.html","/programming-languages/c/09-practice-functions-arrays.html","/programming-languages/c/10-pointers-basics.html","/programming-languages/c/11-memory-management.html","/programming-languages/c/12-algorithm-basics.html","/programming-languages/c/13-structs-unions.html","/programming-languages/c/14-file-io.html","/programming-languages/c/15-sorting-algorithms.html","/programming-languages/c/16-searching-algorithms.html","/problems/","/programming-languages/","/programming-languages/c/","/programming-languages/cpp/","/programming-languages/csharp/","/programming-languages/java/","/programming-languages/python/","/intro.html"]')},4923:(i,s,a)=>{},6653:(i,s,a)=>{a.d(s,{K:()=>n});const n=JSON.parse('{"encrypt":{},"author":{"name":"GahooChen","url":"https://gitee.com/GahooChen"},"logo":"/avatar/GahooChen.png","docsDir":"src","footer":"GahooChen的个人博客","displayFooter":true,"blog":{"description":"一个软件工程师，主C++，熟悉Qt、MFC、CLR，C#，Python，Java等等主流编程语言也略懂一二，都做过一些项目","intro":"/intro.html","medias":{}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","contributors":"贡献者","editLink":"编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"routerLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":["/",{"text":"个人简介","icon":"user","link":"/intro.md"},{"text":"开发问题记录与分享","icon":"bug","link":"/problems/"},{"text":"编程语言基础与算法学习","icon":"code","link":"/programming-languages/"}],"sidebar":{"/":["",{"text":"文章","icon":"book","prefix":"posts/","children":"structure"},"intro",{"text":"开发问题记录与分享","icon":"bug","prefix":"problems/","children":"structure"},{"text":"编程语言基础与算法学习","icon":"code","prefix":"programming-languages/","children":["",{"text":"C语言","icon":"c","prefix":"c/","children":["","01-first-program","02-variables-data-types","03-operators","04-control-statements","05-loops","06-practice-summary","07-functions-arrays","08-practice-functions-arrays","09-pointers-basics","10-memory-management","11-algorithm-basics","12-structs-unions","13-file-io","14-sorting-algorithms","15-searching-algorithms"]},{"text":"C++","icon":"cpp","prefix":"cpp/","children":["","course-plan","01-basic-syntax","02-oop-basics","03-oop-advanced","03-templates-stl","05-smart-pointers","06-exception-handling","07-lambda-expressions","08-advanced-features"]},{"text":"C#","icon":"csharp","prefix":"csharp/","children":"structure"},{"text":"Java","icon":"java","prefix":"java/","children":"structure"},{"text":"Python","icon":"python","prefix":"python/","children":"structure"}]}]}}}}')},8123:(i,s,a)=>{a.d(s,{v:()=>n});const n={"/posts/":[],"/problems/":[""],"/programming-languages/csharp/":[""],"/programming-languages/java/":[""],"/programming-languages/python/":[""]}},8164:(i,s,a)=>{a.d(s,{J:()=>l,c:()=>n});const n=JSON.parse("{}"),l=Object.fromEntries([["/",{loader:()=>a.e(4470).then(a.bind(a,1532)),meta:{title:"GahooChen的个人博客",icon:"house"}}],["/intro.html",{loader:()=>a.e(3912).then(a.bind(a,2170)),meta:{date:1757856526e3,excerpt:"<h2>👋 你好，我是GahooChen</h2>\n<p>一名热爱技术、热衷于解决实际问题的软件工程师。这个博客用于记录我的开发历程，分享技术心得与解决方案，同时也希望能够帮助到更多在技术道路上探索的同行。</p>\n<h2>🎓 教育背景</h2>\n<ul>\n<li><strong>毕业院校</strong>：某国内大专院校</li>\n<li><strong>学历</strong>：大专</li>\n<li><strong>专业</strong>：物联网应用技术</li>\n<li><strong>主要课程</strong>：数据结构、操作系统、计算机网络、数据库原理、C/C++程序设计、Java程序设计等</li>\n<li><strong>荣誉奖项</strong>：大学期间积极参加各类技能竞赛，获得多项省级和国家级奖项，最高荣誉为全国二等奖（工业自动化系统开发方向，智能家居系统开发方向）</li>\n</ul>",readingTime:{minutes:4.17,words:1251},title:"个人介绍",icon:"circle-info",type:"article"}}],["/problems/",{loader:()=>a.e(1099).then(a.bind(a,6228)),meta:{date:1757861894e3,excerpt:"\n<p>欢迎来到我的开发问题记录与分享专区！</p>\n<p>在软件开发的道路上，我们经常会遇到各种各样的技术难题和挑战。这个专区将记录我在日常开发过程中遇到的典型问题、解决方案以及心得体会，希望能够帮助到其他开发者。</p>\n<h2>内容分类</h2>\n<h3>🔧 编程错误与调试</h3>\n<p>记录在编码过程中遇到的各类错误信息、调试方法和解决方案。</p>\n<h3>🌐 网络与API</h3>\n<p>分享网络请求、API调用、接口调试等方面的经验和技巧。</p>\n<h3>🗃️ 数据库与存储</h3>\n<p>涵盖数据库设计、查询优化、数据迁移等相关内容。</p>\n<h3>🚀 性能优化</h3>",readingTime:{minutes:1.19,words:357},title:"开发问题记录与分享",type:"article"}}],["/programming-languages/",{loader:()=>a.e(8962).then(a.bind(a,3908)),meta:{date:1757861894e3,excerpt:'\n<p>欢迎来到面向新手的编程语言基础语法与算法学习专区！</p>\n<p>本专区旨在为编程初学者提供系统、易懂的编程语言基础教程和算法学习资料。无论你是刚刚入门的编程新手，还是想要巩固基础知识的开发者，这里都能找到适合你的学习内容。</p>\n<h2>编程语言分类</h2>\n<h3>🔄 通用概念</h3>\n<p><a href="/GahooChenBlog/programming-languages/common-concepts/" target="_blank">通用编程语言概念</a>：包含适用于多种编程语言的基础概念和原理知识，如进制转换、位运算原理等。</p>\n<h3>📚 C语言</h3>',readingTime:{minutes:1.62,words:485},title:"编程语言基础与算法学习",type:"article"}}],["/programming-languages/common-concepts/01-number-systems-bitwise-principles.html",{loader:()=>a.e(9094).then(a.bind(a,8465)),meta:{date:1758294428e3,excerpt:"\n<p>小朋友们，你们知道吗？我们平时用的数字（0-9）其实只是表示数量的一种方式，在计算机世界里，还有很多其他的数字表示方法！今天我们就来探索数字的秘密语言！</p>\n<h2>一、什么是进制？</h2>\n<p>进制就是表示数字的进位方式。我们最熟悉的是十进制（满10进1），但在计算机中，二进制（满2进1）才是主角！</p>\n<h3>1.1 常见的进制</h3>\n<ul>\n<li><strong>十进制（Decimal）</strong>：我们日常生活中使用的进制，有0-9十个数字，满10进1</li>\n<li><strong>二进制（Binary）</strong>：计算机内部使用的进制，只有0和1两个数字，满2进1</li>\n<li><strong>八进制（Octal）</strong>：有0-7八个数字，满8进1</li>\n<li><strong>十六进制（Hexadecimal）</strong>：有0-9和A-F十六个数字，满16进1</li>\n</ul>",readingTime:{minutes:5.77,words:1730},title:"进制转换与位运算原理：数字世界的密码",type:"article"}}],["/programming-languages/common-concepts/",{loader:()=>a.e(8880).then(a.bind(a,9971)),meta:{date:1758294428e3,excerpt:'\n<p>本目录包含适用于多种编程语言的基础概念和原理知识。这些概念是理解计算机科学和编程的基础知识，无论你学习哪种编程语言，这些知识都会对你有所帮助。</p>\n<h2>目录内容</h2>\n<ul>\n<li><a href="/GahooChenBlog/programming-languages/common-concepts/01-number-systems-bitwise-principles.html" target="_blank">进制转换与位运算原理</a>：学习不同进制的表示方法、转换规则以及位运算的数学原理和应用</li>\n</ul>\n<h2>为什么学习这些通用概念？</h2>',readingTime:{minutes:.84,words:252},title:"通用编程语言概念",type:"article"}}],["/programming-languages/c/01-first-program.html",{loader:()=>a.e(2811).then(a.bind(a,2347)),meta:{date:1758206476e3,excerpt:'\n<p>小朋友们，你们学说话的时候，是不是先学喊"爸爸妈妈"，然后才能说更多的话呢？学习C语言也是一样的道理！这一节我们要学习如何编写你的第一个C语言程序。</p>\n<h2>你好，世界！</h2>\n<p>让我们先来看一个最简单的C语言程序，就像你学写的第一个字一样：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"你好，世界！</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.45,words:734},title:"第一个C语言程序：向世界问好",type:"article"}}],["/programming-languages/c/02-variables-data-types.html",{loader:()=>a.e(953).then(a.bind(a,907)),meta:{date:1758206476e3,excerpt:'\n<p>小朋友们，你们有没有自己的小抽屉或者小盒子用来放各种各样的东西？比如，铅笔盒放铅笔，玩具箱放玩具，存钱罐放零花钱。在C语言中，我们也有类似的"小盒子"，它们叫做变量。</p>\n<h2>变量：计算机的小盒子</h2>\n<p>变量就像计算机里的小盒子，用来存放各种信息。比如，你可以用一个小盒子存放你的年龄，用另一个小盒子存放你的身高。</p>\n<p>在C语言中，我们需要告诉计算机这个小盒子要装什么类型的东西：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 整数类型的变量，存放年龄</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> height </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 145.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 小数类型的变量，存放身高</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> grade </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'A\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 字符类型的变量，存放成绩等级</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.64,words:1092},title:"变量和数据类型：计算机的收纳盒",type:"article"}}],["/programming-languages/c/03-operators.html",{loader:()=>a.e(6735).then(a.bind(a,9447)),meta:{date:1758206476e3,excerpt:'\n<p>小朋友们，你们平时做数学题的时候是不是会用到加减乘除这些运算符号？在C语言中，我们也有各种各样的运算符，它们就像是计算机的计算器，可以帮我们做各种计算。</p>\n<h2>算术运算符：数学计算</h2>\n<p>算术运算符就是我们平时数学中用到的加减乘除等运算符号：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">         // 加法：sum = 13</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> difference </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 减法：difference = 7</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> product </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     // 乘法：product = 30</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> quotient </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 除法：quotient = 3（注意：整数相除会去掉小数部分）</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> remainder </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   // 取余：remainder = 1（10除以3余1）</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.99,words:1197},title:"运算符：计算机的计算器",type:"article"}}],["/programming-languages/c/04-control-statements.html",{loader:()=>a.e(8221).then(a.bind(a,5167)),meta:{date:1758206476e3,excerpt:'\n<p>小朋友们，你们在生活中是不是会根据不同的情况做不同的决定呢？比如，如果天气好，你可能会去公园玩；如果下雨，你可能会留在家里看书。在C语言中，我们也可以让程序根据不同的条件做不同的事情，这就是控制语句的作用。</p>\n<h2>if语句：如果...就...</h2>\n<p><code>if</code>语句是最基本的控制语句，它的用法就像我们平时说的"如果...就..."一样：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> score </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 85</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (score </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 90</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"优秀！</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (score </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"良好！</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (score </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 60</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"及格！</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"加油！</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.14,words:943},title:"控制语句：让程序做决定",type:"article"}}],["/programming-languages/c/05-loops.html",{loader:()=>a.e(4503).then(a.bind(a,2806)),meta:{date:1758206476e3,excerpt:'\n<p>小朋友们，你们有没有过需要重复做某件事情的经历？比如，每天早晨起床、刷牙、洗脸，这些都是重复的事情。在C语言中，我们也经常需要让计算机重复做某件事情，这时候就可以使用循环语句。</p>\n<h2>while循环：当...的时候就继续做</h2>\n<p><code>while</code>循环的作用是：当某个条件为真时，就重复执行一段代码。它的基本结构是这样的：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (条件) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 要重复执行的代码</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.98,words:1193},title:"循环语句：重复做一件事",type:"article"}}],["/programming-languages/c/06-practice-summary.html",{loader:()=>a.e(4161).then(a.bind(a,7979)),meta:{date:1758206476e3,excerpt:'\n<p>小朋友们，现在我们已经学习了C语言的一些基础语法知识。让我们通过一些小练习来巩固一下所学的内容吧！</p>\n<h2>实战小练习</h2>\n<h3>练习1：计算1到100的和</h3>\n<p>让我们写一个程序来计算1到100的所有整数的和。这是一个经典的循环练习。</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 用来存储和</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> i;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 使用for循环计算1到100的和</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> i;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1到100的和是：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, sum);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:7.52,words:2256},title:"实战小练习与基础语法小结",type:"article"}}],["/programming-languages/c/07-functions-arrays.html",{loader:()=>a.e(8870).then(a.bind(a,6276)),meta:{date:1758206476e3,excerpt:'\n<p>小朋友们，你们有没有玩过搭积木？函数就像是已经拼好的积木块，可以反复使用；而数组就像是一排相同大小的盒子，可以整齐地存放很多东西。这一节我们来学习如何使用函数和数组让我们的程序变得更加有条理！</p>\n<h2>函数：可以重复使用的代码块</h2>\n<p>你们有没有发现，有时候我们在程序中会多次用到相同的代码？这时候就可以把这些代码封装成一个函数，就像把常用的积木块提前拼好一样。</p>\n<h3>函数的定义与调用</h3>\n<p>让我们来看一个计算长方形面积的函数：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 函数定义：计算长方形的面积</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateArea</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> area </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> length </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> width;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> area;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 返回计算结果</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> roomLength </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> roomWidth </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> classroomLength </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> classroomWidth </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 调用函数计算房间面积</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> roomArea </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateArea</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(roomLength, roomWidth);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"房间的面积是：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">平方米</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, roomArea);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 再次调用函数计算教室面积</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> classroomArea </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateArea</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(classroomLength, classroomWidth);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"教室的面积是：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">平方米</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, classroomArea);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.87,words:1461},title:"函数与数组：让程序更有条理",type:"article"}}],["/programming-languages/c/08-bitwise-operations.html",{loader:()=>a.e(9111).then(a.bind(a,8253)),meta:{date:1758294428e3,excerpt:'\n<p>小朋友们，你们知道计算机是怎么存储数字的吗？其实，计算机内部是用二进制数（只有0和1）来表示所有信息的。位运算符就是直接操作这些二进制位的特殊工具！</p>\n<p>如果你想了解更多关于二进制和其他进制的知识，以及它们之间的转换方法，可以阅读<a href="/GahooChenBlog/programming-languages/common-concepts/01-number-systems-bitwise-principles.html" target="_blank">进制转换与位运算原理</a>这篇通用概念文章哦！</p>\n<h2>什么是位运算？</h2>\n<p>位运算是直接对整数在内存中的二进制位进行操作的运算。在C语言中，我们有6个位运算符，它们可以帮助我们高效地处理一些特殊的计算任务。</p>',readingTime:{minutes:3,words:900},title:"位运算符：计算机的二进制秘密",type:"article"}}],["/programming-languages/c/09-practice-functions-arrays.html",{loader:()=>a.e(4130).then(a.bind(a,1568)),meta:{date:1758206476e3,excerpt:'\n<p>小朋友们，上一节课我们学习了函数与数组的基础知识，现在让我们通过一些有趣的练习来巩固这些知识吧！这些练习就像是游戏中的关卡，完成它们可以帮助你更好地掌握编程技能！</p>\n<h2>练习一：计算数组的和与平均值</h2>\n<p>让我们来编写一个程序，计算一个数组中所有元素的和与平均值。我们可以定义一个函数来计算和，再定义另一个函数来计算平均值。</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 计算数组中所有元素的和</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateSum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> numbers</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> size; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">+=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> numbers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[i];</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sum;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 计算数组中所有元素的平均值</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">float</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateAverage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> numbers</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateSum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(numbers, size);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> size;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> scores</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">85</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">92</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">78</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">90</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">88</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> size </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateSum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(scores, size);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> average </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateAverage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(scores, size);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"数组元素的和：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, sum);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"数组元素的平均值：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%.2f</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, average);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.65,words:1395},title:"函数与数组练习：巩固你的编程技能",type:"article"}}],["/programming-languages/c/10-pointers-basics.html",{loader:()=>a.e(7496).then(a.bind(a,2039)),meta:{date:1758206476e3,excerpt:'\n<p>小朋友们，你们有没有想过，当我们在电脑上玩游戏、看视频或者写作业的时候，电脑是怎么记住这些信息的呢？今天我们要一起来探索计算机的"小仓库"——内存，以及如何用指针来访问这个仓库！</p>\n<h2>内存是什么？</h2>\n<p>内存就像计算机的小仓库，用来临时存放正在使用的信息。当我们打开一个程序时，这个程序就被加载到内存中；当我们关闭程序时，这个程序占用的内存就会被释放出来，留给其他程序使用。</p>\n<p>想象一下，内存就像一个巨大的储物柜，里面有许多小格子，每个小格子都有一个唯一的编号（地址），每个小格子可以存放一些信息。</p>\n<h2>指针：指向内存的标签</h2>\n<p>指针就像是贴在储物柜上的标签，它告诉我们某个东西存放在哪个格子里。在C语言中，指针是一个变量，但它不像普通变量那样存储数据本身，而是存储数据在内存中的地址。</p>',readingTime:{minutes:11.77,words:3532},title:"指针基础：指向内存的标签",type:"article"}}],["/programming-languages/c/11-memory-management.html",{loader:()=>a.e(2152).then(a.bind(a,651)),meta:{date:1758206476e3,excerpt:"\n<p>小朋友们，上一节课我们学习了指针的基础知识，知道了指针是指向内存地址的标签。这一节课，我们要学习如何在程序运行时动态地管理内存空间，就像我们可以根据需要随时调整储物柜的大小一样！</p>\n<h2>为什么需要动态内存分配？</h2>\n<p>在之前的学习中，我们使用的变量和数组都是在程序编译时就确定了大小的。但有时候，我们在编写程序时并不知道需要使用多少内存。比如，当我们要编写一个成绩管理系统时，我们可能不知道会有多少学生的成绩需要存储。</p>\n<p>这时候，动态内存分配就派上用场了！它让我们可以在程序运行时根据实际需要申请和释放内存空间。</p>\n<h2>动态内存分配的函数</h2>\n",readingTime:{minutes:4.9,words:1470},title:"内存管理：按需使用仓库空间",type:"article"}}],["/programming-languages/c/12-algorithm-basics.html",{loader:()=>a.e(3169).then(a.bind(a,2913)),meta:{date:1758206476e3,excerpt:"\n<p>小朋友们，你们有没有想过，为什么计算机能够如此快速地完成各种复杂的任务？这不仅仅是因为计算机的硬件很强大，还因为计算机运行的程序中包含了各种聪明的算法！今天，我们就来学习一下算法的基础知识。</p>\n<h2>什么是算法？</h2>\n<p>算法是解决问题的步骤和方法，就像我们日常生活中做事的步骤一样。例如，当我们想要泡一杯奶茶时，我们需要：</p>\n<ol>\n<li>准备材料：奶茶粉、热水、杯子、勺子</li>\n<li>将奶茶粉倒入杯子中</li>\n<li>倒入适量的热水</li>\n<li>用勺子搅拌均匀</li>\n<li>一杯美味的奶茶就做好了</li>\n</ol>\n<p>这就是一个简单的算法！在计算机中，算法就是告诉计算机如何解决某个问题的一系列步骤。</p>",readingTime:{minutes:5.8,words:1739},title:"算法基础：让计算机更聪明地解决问题",type:"article"}}],["/programming-languages/c/13-structs-unions.html",{loader:()=>a.e(3594).then(a.bind(a,7053)),meta:{date:1758206476e3,excerpt:'\n<p>小朋友们，你们有没有整理过自己的书包？把课本放在一起，笔记本放在一起，铅笔、橡皮等文具放在铅笔盒里。在C语言中，我们也可以用结构体和共用体来整理不同类型的数据，让我们的程序更加有条理！</p>\n<h2>结构体：把不同类型的数据打包在一起</h2>\n<p>结构体就像是一个"数据打包盒"，可以把不同类型的数据放在一起。比如，我们可以用一个结构体来表示一个学生的信息，包括姓名、年龄、身高、成绩等。</p>\n<h3>结构体的定义与使用</h3>\n<p>让我们来看一个表示学生信息的结构体例子：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;string.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 定义一个名为Student的结构体</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Student {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">];</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 姓名</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> age;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">       // 年龄</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> height;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 身高</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> score;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   // 成绩</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 创建一个Student类型的变量</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Student stu1;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 给结构体成员赋值</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    strcpy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"小明"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 注意：字符串需要使用strcpy函数赋值</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">age</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">height</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 145.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">score</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 92.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 访问结构体成员</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"姓名：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"年龄：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">岁</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"身高：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%.1f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">厘米</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"成绩：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%.1f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">分</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 也可以在定义结构体变量的同时进行初始化</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Student stu2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"小红"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">142.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">88.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">另一个学生的信息：</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"姓名：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"年龄：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">岁</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"身高：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%.1f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">厘米</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"成绩：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%.1f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">分</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:7.46,words:2237},title:"结构体与共用体：整理你的数据",type:"article"}}],["/programming-languages/c/14-file-io.html",{loader:()=>a.e(3143).then(a.bind(a,7094)),meta:{date:1758206476e3,excerpt:"\n<p>小朋友们，你们有没有写过日记或者画过画？当你写完日记或者画完画后，你会把它们保存起来，这样以后还可以再看。在C语言中，我们也可以让程序把数据保存到文件中，或者从文件中读取数据。这一节我们就来学习文件操作！</p>\n<h2>文件是什么？</h2>\n<p>文件是存储在计算机存储设备（如硬盘、U盘等）上的一组相关数据的集合。我们平时使用的文档、图片、音乐、视频等都是文件。</p>\n<p>在C语言中，文件可以分为两种类型：</p>\n<ol>\n<li><strong>文本文件</strong>：存储的是字符，可以用记事本等文本编辑器打开查看（就像你写的日记）</li>\n<li><strong>二进制文件</strong>：存储的是二进制数据，需要特定的程序才能打开查看（就像你画的画或者拍的照片）</li>\n</ol>",readingTime:{minutes:7.99,words:2396},title:"文件操作：让程序记住你的数据",type:"article"}}],["/programming-languages/c/15-sorting-algorithms.html",{loader:()=>a.e(8932).then(a.bind(a,5194)),meta:{date:1758206476e3,excerpt:"\n<p>小朋友们，你们有没有整理过自己的玩具柜？把积木按颜色分类，把拼图按大小排列，或者把绘本按顺序放在书架上。在计算机中，我们也经常需要整理数据，比如按成绩高低排列学生名单，按价格排序商品列表等。这时候，排序算法就派上用场了！</p>\n<h2>什么是排序算法？</h2>\n<p>排序算法就是一种让计算机按照一定的顺序（如从小到大、从大到小、按字母顺序等）排列数据的方法。就像你整理玩具的方法有很多种一样，计算机排序的方法也有很多种，每种方法都有自己的特点和适用场景。</p>\n<h2>常见的排序算法</h2>\n<h3>冒泡排序：像气泡一样往上冒</h3>\n<p>冒泡排序是一种简单的排序算法，它的工作原理就像气泡在水中往上冒一样：比较相邻的两个元素，如果它们的顺序错误就交换它们，直到没有再需要交换的元素为止。</p>",readingTime:{minutes:9.06,words:2717},title:"排序算法：让计算机帮你整理东西",type:"article"}}],["/programming-languages/c/16-searching-algorithms.html",{loader:()=>a.e(1327).then(a.bind(a,972)),meta:{date:1758206476e3,excerpt:"\n<p>小朋友们，你们有没有在玩具堆里找过自己最喜欢的那个玩具？或者在书架上找过一本特定的书？在计算机中，我们也经常需要从大量的数据中找出我们需要的那部分数据。这时候，查找算法就派上用场了！</p>\n<h2>什么是查找算法？</h2>\n<p>查找算法就是一种让计算机从大量的数据中找到特定数据的方法。就像你找东西的方法有很多种一样，计算机查找的方法也有很多种，每种方法都有自己的特点和适用场景。</p>\n<h2>常见的查找算法</h2>\n<h3>线性查找：一个一个找</h3>\n<p>线性查找，也叫顺序查找，是最简单的查找算法。它的工作原理是：从数据的一端开始，一个一个地检查每个元素，直到找到目标元素或者检查完所有元素。</p>",readingTime:{minutes:9.82,words:2947},title:"查找算法：让计算机帮你找东西",type:"article"}}],["/programming-languages/c/",{loader:()=>a.e(6936).then(a.bind(a,5503)),meta:{date:1757861894e3,excerpt:'\n<p>你好呀！欢迎来到C语言的奇妙世界！C语言就像是一种和计算机对话的特殊语言，由一位叫丹尼斯·里奇的叔叔在1970年代发明。它可厉害了，现在我们用的很多编程语言（像C++、Java、Python）都是从C语言这里学的本事呢！</p>\n<h2>为什么说C语言很特别？</h2>\n<p>想象一下，C语言就像是一个既能和计算机"亲密交流"又能让人类容易理解的翻译官：</p>\n<ul>\n<li><strong>跑得飞快</strong>：C语言能直接告诉计算机怎么使用内存，所以程序运行得特别快</li>\n<li><strong>到处都能用</strong>：用C语言写的程序，能在不同的电脑上运行（就像你的玩具能在客厅也能在卧室玩一样）</li>\n<li><strong>功能超丰富</strong>：C语言有很多"小工具"（运算符和数据类型），能帮你做各种各样的事情</li>\n<li><strong>简单又灵活</strong>：C语言的语法就像简单的积木，可以搭出千变万化的形状</li>\n</ul>',readingTime:{minutes:3.16,words:947},title:"C语言入门：和计算机交朋友的神奇语言",type:"article"}}],["/programming-languages/cpp/01-getting-started.html",{loader:()=>a.e(904).then(a.bind(a,3110)),meta:{date:1758294428e3,excerpt:'\n<p>你好呀！欢迎来到C++的第一节课。在这节课中，我们将一起认识C++的基本结构，了解如何编写和编译你的第一个C++程序，以及C++与C语言的一些初步区别。</p>\n<h2>C++是什么？</h2>\n<p>C++是一种强大的编程语言，它是在C语言的基础上发展而来的。如果说C语言是和计算机交朋友的基础语言，那么C++就像是让你和计算机成为更好朋友的进阶语言！</p>\n<p>C++由本贾尼·斯特劳斯特卢普在1983年创建，最初被称为"带类的C"。随着时间的推移，它逐渐发展成为一种功能强大、应用广泛的编程语言。</p>\n<h2>你的第一个C++程序</h2>\n<p>让我们来编写你的第一个C++程序吧！这个程序会在屏幕上显示"Hello, C++ World!"。</p>',readingTime:{minutes:3.08,words:925},title:"C++入门：开启编程新旅程",type:"article"}}],["/programming-languages/cpp/02-enhanced-data-types.html",{loader:()=>a.e(7132).then(a.bind(a,9305)),meta:{date:1758294428e3,excerpt:"\n<p>在上一节课中，我们学习了C++的基本结构和编译方式。在这节课中，我们将深入了解C++在数据类型方面的增强特性，看看C++是如何扩展和改进C语言的数据类型系统的。</p>\n<h2>C++中的基本数据类型</h2>\n<p>C++保留了C语言的所有基本数据类型：</p>\n<ul>\n<li>整型：<code>int</code>、<code>short</code>、<code>long</code>、<code>long long</code></li>\n<li>浮点型：<code>float</code>、<code>double</code>、<code>long double</code></li>\n<li>字符型：<code>char</code></li>\n<li>布尔型：C语言中的<code>_Bool</code>（在C99标准中引入）</li>\n</ul>",readingTime:{minutes:4.04,words:1211},title:"C++数据类型增强：更丰富的数据表达",type:"article"}}],["/programming-languages/cpp/03-io-operations.html",{loader:()=>a.e(8855).then(a.bind(a,1031)),meta:{date:1758294428e3,excerpt:"\n<p>在上一节课中，我们学习了C++的数据类型增强特性。在这节课中，我们将深入了解C++特有的输入输出系统，看看C++是如何让程序与用户进行交互的。</p>\n<h2>C++的I/O流</h2>\n<p>C++使用流（stream）的概念来处理输入输出。流是一种抽象，它代表了数据的流动。C++的I/O系统包含在<code>iostream</code>库中，主要提供了以下对象：</p>\n<ul>\n<li><code>std::cout</code>：标准输出流，用于将数据输出到屏幕</li>\n<li><code>std::cin</code>：标准输入流，用于从键盘读取数据</li>\n<li><code>std::cerr</code>：标准错误流，用于输出错误信息</li>\n<li><code>std::clog</code>：标准日志流，用于输出日志信息</li>\n</ul>",readingTime:{minutes:4.45,words:1336},title:"C++的输入输出：与程序对话的桥梁",type:"article"}}],["/programming-languages/cpp/04-enhanced-functions.html",{loader:()=>a.e(3205).then(a.bind(a,3985)),meta:{date:1758294428e3,excerpt:'\n<p>在上一节课中，我们学习了C++特有的输入输出系统。在这节课中，我们将深入了解C++在函数方面的增强特性，看看C++是如何扩展和改进C语言的函数功能的。</p>\n<h2>C++中函数的基本概念</h2>\n<p>C++保留了C语言的函数基本概念和语法，但增加了许多新的特性和功能。让我们先来回顾一下C语言中函数的基本结构：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// C语言中的函数定义</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">return_type </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">function_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">parameter_list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 函数体</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> return_value;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.79,words:1436},title:"函数的增强：C++中的高级函数特性",type:"article"}}],["/programming-languages/cpp/05-classes-objects.html",{loader:()=>a.e(7245).then(a.bind(a,5901)),meta:{date:1758294428e3,excerpt:'\n<p>在上一节课中，我们学习了C++在函数方面的增强特性。在这节课中，我们将开始学习C++最重要的特性——面向对象编程（OOP），特别是类和对象的基本概念和使用方法。</p>\n<h2>什么是面向对象编程？</h2>\n<p>面向对象编程（Object-Oriented Programming，简称OOP）是一种编程范式，它使用"对象"来设计应用程序和计算机程序。面向对象编程的主要特点包括：</p>\n<ul>\n<li><strong>封装</strong>：将数据和方法封装在一个单元（类）中</li>\n<li><strong>继承</strong>：允许创建新类，继承现有类的属性和方法</li>\n<li><strong>多态</strong>：允许不同的对象对同一消息作出不同的响应</li>\n<li><strong>抽象</strong>：关注对象的本质特征，忽略非本质细节</li>\n</ul>',readingTime:{minutes:4.33,words:1298},title:"类与对象基础：C++面向对象编程的起点",type:"article"}}],["/programming-languages/cpp/06-constructors-destructors.html",{loader:()=>a.e(1161).then(a.bind(a,9892)),meta:{date:1758294428e3,excerpt:"\n<p>在上一节课中，我们学习了C++类和对象的基本概念。在这节课中，我们将深入了解类的两个特殊成员函数：构造函数和析构函数，它们负责对象的创建和销毁过程。</p>\n<h2>构造函数</h2>\n<p>构造函数是一种特殊的成员函数，当创建类的对象时，它会自动被调用。构造函数的主要作用是初始化对象的成员变量。</p>\n<h3>构造函数的特点</h3>\n<ul>\n<li>构造函数的名称与类名相同</li>\n<li>构造函数没有返回类型</li>\n<li>构造函数可以被重载</li>\n<li>创建对象时自动调用</li>\n</ul>\n<h3>默认构造函数</h3>\n<p>如果一个类没有定义任何构造函数，编译器会自动生成一个默认构造函数。默认构造函数没有参数，不做任何操作。</p>",readingTime:{minutes:5.53,words:1659},title:"构造函数与析构函数：对象的生命周期管理",type:"article"}}],["/programming-languages/cpp/07-inheritance-polymorphism.html",{loader:()=>a.e(6544).then(a.bind(a,8213)),meta:{date:1758294428e3,excerpt:'\n<p>在前面的课程中，我们学习了C++类的基本概念、构造函数和析构函数。在这节课中，我们将探讨C++面向对象编程的两个核心概念：继承与多态。</p>\n<h2>继承</h2>\n<p>继承是一种创建新类的方式，新类可以继承现有类的属性和方法，同时可以添加自己的属性和方法。通过继承，我们可以实现代码的重用和扩展。</p>\n<h3>继承的基本语法</h3>\n<p>在C++中，继承的基本语法如下：</p>\n<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> DerivedClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> : access-specifier BaseClass {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 派生类的成员</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:5.58,words:1673},title:"继承与多态：面向对象编程的精髓",type:"article"}}],["/programming-languages/cpp/08-operator-overloading.html",{loader:()=>a.e(4320).then(a.bind(a,7576)),meta:{date:1758294428e3,excerpt:'\n<p>在之前的课程中，我们学习了C++的继承与多态特性。在这节课中，我们将探讨C++的另一个强大特性——运算符重载，它允许我们为自定义类型定义标准运算符的行为。</p>\n<h2>运算符重载的基本概念</h2>\n<p>运算符重载是C++的一项特性，它允许我们为自定义类型（如类）重新定义或重载大多数C++运算符。通过运算符重载，我们可以使对象像基本类型一样使用运算符进行操作。</p>\n<h3>运算符重载的语法</h3>\n<p>运算符重载的语法如下：</p>\n<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">返回类型 operator运算符(参数列表) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 运算符实现</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:7.63,words:2288},title:"运算符重载：让对象支持运算符操作",type:"article"}}],["/programming-languages/cpp/09-templates.html",{loader:()=>a.e(9531).then(a.bind(a,9063)),meta:{date:1758294428e3,excerpt:"\n<p>在前面的课程中，我们学习了C++的运算符重载特性。在这节课中，我们将探讨C++的模板编程，这是实现泛型编程的基础。</p>\n<h2>模板的基本概念</h2>\n<p>模板是C++的一种特性，它允许我们定义通用的函数或类，这些函数或类可以处理不同类型的数据。通过模板，我们可以编写与类型无关的代码，提高代码的重用性和灵活性。</p>\n<p>C++模板主要分为两类：</p>\n<ul>\n<li>函数模板</li>\n<li>类模板</li>\n</ul>\n<h2>函数模板</h2>\n<p>函数模板允许我们定义一个通用的函数，可以处理不同类型的参数。函数模板的定义使用关键字<code>template</code>和模板参数列表。</p>",readingTime:{minutes:7.26,words:2179},title:"模板编程：泛型编程的基础",type:"article"}}],["/programming-languages/cpp/10-standard-library-containers.html",{loader:()=>a.e(2144).then(a.bind(a,4397)),meta:{date:1758294428e3,excerpt:"\n<p>在前面的课程中，我们学习了C++的模板编程特性。在这节课中，我们将探讨C++标准库中的容器，这些是预先实现好的、高效的数据结构，可以直接在我们的程序中使用。</p>\n<h2>容器概览</h2>\n<p>C++标准库提供了各种类型的容器，用于存储和管理不同类型的数据。这些容器可以分为以下几类：</p>\n<ol>\n<li>序列容器（Sequence Containers）：按顺序存储元素</li>\n<li>关联容器（Associative Containers）：按键存储元素，提供快速查找</li>\n<li>无序关联容器（Unordered Associative Containers）：基于哈希表实现，提供平均常数时间的查找</li>\n<li>容器适配器（Container Adapters）：基于其他容器实现的特殊接口</li>\n</ol>",readingTime:{minutes:9.8,words:2940},title:"C++标准库容器：高效数据结构的集合",type:"article"}}],["/programming-languages/cpp/11-standard-library-algorithms.html",{loader:()=>a.e(161).then(a.bind(a,4523)),meta:{date:1758294428e3,excerpt:"\n<p>上一节课我们学习了C++标准库中的容器，这节课我们将探讨C++标准库中的算法。这些算法是一组通用函数，可以用于操作各种容器中的元素，使我们能够以简洁、高效的方式实现常见的数据处理任务。</p>\n<h2>算法概览</h2>\n<p>C++标准库算法主要定义在<code>&lt;algorithm&gt;</code>头文件中，这些算法可以分为以下几类：</p>\n<ol>\n<li>非修改性序列操作（Non-modifying sequence operations）</li>\n<li>修改性序列操作（Modifying sequence operations）</li>\n<li>排序和相关操作（Sorting and related operations）</li>\n<li>数值算法（Numerical algorithms）</li>\n</ol>",readingTime:{minutes:9.55,words:2865},title:"C++标准库算法：强大的通用函数集合",type:"article"}}],["/programming-languages/cpp/12-exception-handling.html",{loader:()=>a.e(3111).then(a.bind(a,1741)),meta:{date:1758294428e3,excerpt:"\n<p>在前面的课程中，我们学习了C++标准库中的算法。在这节课中，我们将探讨C++的异常处理机制，这是C++提供的一种处理运行时错误的结构化方式，可以使我们的程序更加健壮和可靠。</p>\n<h2>异常处理概述</h2>\n<p>在C语言中，我们通常使用错误码来表示函数执行的结果，然后在调用函数后检查这些错误码。这种方式有一些缺点：</p>\n<ol>\n<li>错误处理代码与正常逻辑代码混合在一起，使代码变得复杂和难以阅读</li>\n<li>容易忘记检查错误码</li>\n<li>无法在深层次嵌套的函数调用中方便地传递错误信息</li>\n</ol>\n<p>C++的异常处理机制提供了一种更加结构化和灵活的方式来处理错误。异常处理主要包含三个关键字：<code>try</code>、<code>catch</code>和<code>throw</code>。</p>",readingTime:{minutes:9.16,words:2747},title:"C++异常处理：优雅地应对错误",type:"article"}}],["/programming-languages/cpp/13-raii-resource-management.html",{loader:()=>a.e(4985).then(a.bind(a,5734)),meta:{date:1758294428e3,excerpt:"\n<p>上一节课我们学习了C++的异常处理机制。在这节课中，我们将探讨C++的RAII（Resource Acquisition Is Initialization）机制，这是一种与异常处理密切相关的资源管理技术，被广泛认为是C++中最重要的编程范式之一。</p>\n<h2>RAII机制概述</h2>\n<p>RAII是一种编程范式，它确保在获取资源的同时初始化一个对象，并且在对象的生命周期结束时（即对象被销毁时）自动释放资源。RAII机制的核心思想是：<strong>将资源的获取和释放与对象的生命周期绑定在一起</strong>。</p>\n<p>在C++中，对象的生命周期是由其作用域决定的。当对象离开其作用域时，它的析构函数会被自动调用。我们可以利用这一特性，在对象的构造函数中获取资源，在析构函数中释放资源，从而确保资源的安全管理。</p>",readingTime:{minutes:10.9,words:3269},title:"C++ RAII机制：资源获取即初始化",type:"article"}}],["/programming-languages/cpp/14-namespaces.html",{loader:()=>a.e(9060).then(a.bind(a,3674)),meta:{date:1758294428e3,excerpt:"\n<p>上一节课我们学习了C++的RAII机制，这是一种重要的资源管理技术。在这节课中，我们将探讨C++的命名空间（Namespaces）机制，这是一种用于组织代码、避免命名冲突的有效工具。</p>\n<h2>命名空间的概念</h2>\n<p>命名空间是C++中一种用于组织代码的机制，它可以将相关的代码组织在一起，并防止不同代码库之间的命名冲突。在C++中，我们可以将类、函数、变量等声明和定义放在命名空间中，从而形成一个逻辑上的代码分组。</p>\n<p>命名空间的主要作用包括：</p>\n<ol>\n<li>避免命名冲突：不同库或不同模块中可能有相同名称的函数、类或变量，使用命名空间可以区分它们</li>\n<li>组织代码：将相关的代码组织在同一个命名空间中，使代码结构更加清晰</li>\n<li>控制访问：可以限制命名空间中内容的可见性</li>\n</ol>",readingTime:{minutes:7.21,words:2164},title:"C++命名空间：避免命名冲突的有效机制",type:"article"}}],["/programming-languages/cpp/15-stl-algorithms.html",{loader:()=>a.e(8219).then(a.bind(a,9314)),meta:{date:1758294428e3,excerpt:"\n<p>上一节课我们学习了C++的命名空间机制，这是一种用于组织代码的有效工具。在这节课中，我们将探讨C++ STL（Standard Template Library）中的算法库，这是一套强大的泛型算法工具，可以大大提高我们的编程效率。</p>\n<h2>STL算法库概述</h2>\n<p>STL算法库是C++标准库中的一个重要组成部分，它提供了大量的泛型算法，可以用于各种容器和数据结构。这些算法大多定义在<code>&lt;algorithm&gt;</code>头文件中，有些数值算法定义在<code>&lt;numeric&gt;</code>头文件中。</p>\n<p>STL算法库的主要特点包括：</p>",readingTime:{minutes:10.85,words:3256},title:"C++ STL算法库：强大的泛型算法工具",type:"article"}}],["/programming-languages/cpp/16-memory-model.html",{loader:()=>a.e(9921).then(a.bind(a,4465)),meta:{date:1758294428e3,excerpt:"\n<p>上一节课我们学习了C++ STL算法库，这是一套强大的泛型算法工具。在这节课中，我们将探讨C++的内存模型和内存管理机制，这是理解C++程序性能和行为的关键。</p>\n<h2>内存模型概述</h2>\n<p>C++内存模型定义了程序中变量的存储方式、生命周期以及如何访问这些变量。理解C++的内存模型对于编写高效、可靠的程序至关重要。</p>\n<p>C++程序的内存空间通常分为以下几个区域：</p>\n<ol>\n<li><strong>代码区（Text Segment）</strong>：存储程序的可执行指令</li>\n<li><strong>全局/静态存储区（Data Segment）</strong>：存储全局变量和静态变量</li>\n<li><strong>常量存储区（Const Data Segment）</strong>：存储常量</li>\n<li><strong>堆区（Heap）</strong>：动态分配的内存，由程序员管理</li>\n<li><strong>栈区（Stack）</strong>：存储函数调用的返回地址、参数、局部变量等</li>\n</ol>",readingTime:{minutes:12.22,words:3665},title:"C++内存模型与内存管理：深入理解程序的内存行为",type:"article"}}],["/programming-languages/cpp/17-multithreading.html",{loader:()=>a.e(2292).then(a.bind(a,668)),meta:{date:1758294428e3,excerpt:"\n<p>上一节课我们学习了C++的内存模型和内存管理机制，这是理解C++程序性能和行为的关键。在这节课中，我们将探讨C++的多线程编程，这是现代C++程序开发中的一个重要主题。</p>\n<h2>多线程编程概述</h2>\n<p>多线程编程是指在一个程序中同时执行多个线程，每个线程可以独立运行不同的代码。多线程编程的主要目的是提高程序的性能和响应性，特别是在多核处理器上，可以充分利用硬件资源。</p>\n<p>在C++11之前，C++标准库中没有提供多线程编程的支持，程序员需要使用平台特定的API（如Windows的Win32 API或POSIX的pthread库）来进行多线程编程。C++11引入了标准的多线程库，使多线程编程变得更加简单和可移植。</p>",readingTime:{minutes:13.98,words:4195},title:"C++多线程编程：并发与同步技术",type:"article"}}],["/programming-languages/cpp/18-move-semantics.html",{loader:()=>a.e(6085).then(a.bind(a,9360)),meta:{date:1758294428e3,excerpt:"\n<p>上一节课我们学习了C++的多线程编程，掌握了如何在C++中创建和管理线程，以及如何确保线程安全。在这节课中，我们将探讨C++11引入的重要特性——移动语义和右值引用，这是C++性能优化的重要工具。</p>\n<h2>值类别与右值引用</h2>\n<p>在介绍移动语义之前，我们需要了解C++中的值类别（value categories）。C++11将表达式的值类别分为以下几种：</p>\n<ol>\n<li><strong>左值（lvalue）</strong>：表达式结束后依然存在的持久对象</li>\n<li><strong>右值（rvalue）</strong>：表达式结束后就不再存在的临时对象</li>\n<li><strong>将亡值（xvalue）</strong>：即将被移动的对象，属于右值的一种</li>\n<li><strong>纯右值（prvalue）</strong>：临时对象或不关联对象的值</li>\n</ol>",readingTime:{minutes:11.97,words:3590},title:"C++移动语义与右值引用：提升程序性能",type:"article"}}],["/programming-languages/cpp/19-smart-pointers.html",{loader:()=>a.e(3779).then(a.bind(a,6646)),meta:{date:1758294428e3,excerpt:"\n<p>上一节课我们学习了C++的移动语义和右值引用，这些特性可以显著提高程序的性能。在这节课中，我们将探讨C++11引入的智能指针，这是C++自动内存管理的重要工具，也是RAII（Resource Acquisition Is Initialization）机制的具体实现。</p>\n<h2>内存管理问题</h2>\n<p>在C++中，手动管理内存是一个常见的挑战。如果不小心，很容易导致以下问题：</p>\n<ol>\n<li><strong>内存泄漏</strong>：忘记释放不再使用的内存</li>\n<li><strong>悬挂指针</strong>：指针指向已经释放的内存</li>\n<li><strong>重复释放</strong>：同一块内存被释放多次</li>\n<li><strong>内存分配失败</strong>：没有检查内存分配是否成功</li>\n</ol>",readingTime:{minutes:12.3,words:3691},title:"C++智能指针：自动内存管理",type:"article"}}],["/programming-languages/cpp/20-modern-cpp-features.html",{loader:()=>a.e(1604).then(a.bind(a,4671)),meta:{date:1758294428e3,excerpt:'\n<p>上一节课我们学习了C++的智能指针，这是C++自动内存管理的重要工具。在这最后一节课中，我们将探讨C++11及以后版本引入的现代特性，这些特性使C++编程变得更加高效、安全和便捷。</p>\n<h2>C++标准版本概述</h2>\n<p>在开始介绍现代C++特性之前，让我们先了解一下C++标准的发展历程：</p>\n<ul>\n<li><strong>C++98/C++03</strong>：第一个C++标准版本</li>\n<li><strong>C++11</strong>：重大更新，引入了大量现代特性，也被称为"C++0x"</li>\n<li><strong>C++14</strong>：对C++11的增量更新，完善和扩展了C++11的特性</li>\n<li><strong>C++17</strong>：进一步的改进和新特性</li>\n<li><strong>C++20</strong>：引入了许多重大特性，如概念、范围库等</li>\n<li><strong>C++23</strong>：最新的标准版本（正在制定中）</li>\n</ul>',readingTime:{minutes:20.61,words:6182},title:"C++现代特性：C++11/14/17/20新功能",type:"article"}}],["/programming-languages/cpp/",{loader:()=>a.e(1208).then(a.bind(a,3610)),meta:{date:1757861894e3,excerpt:"\n<p>你好呀！欢迎来到C++的精彩世界！C++是在C语言基础上发展起来的高级编程语言，由本贾尼·斯特劳斯特卢普在1983年创建。如果说C语言是和计算机交朋友的基础语言，那么C++就是带计算机认识更广阔世界的进阶语言！</p>\n<h2>为什么说C++很特别？</h2>\n<p>C++就像是C语言的升级版，它保留了C语言的高效和灵活，同时又添加了许多强大的新特性：</p>\n<ul>\n<li><strong>面向对象编程</strong>：C++允许你像搭积木一样创建和使用类与对象，让代码更有条理</li>\n<li><strong>泛型编程</strong>：通过模板，你可以编写适用于多种数据类型的通用代码</li>\n<li><strong>丰富的标准库</strong>：C++提供了大量现成的工具和容器，让编程变得更简单</li>\n<li><strong>兼容C语言</strong>：几乎所有的C代码都可以在C++中直接使用</li>\n<li><strong>更安全的编程</strong>：C++增加了许多安全机制，帮助你避免常见的编程错误</li>\n</ul>",readingTime:{minutes:3.48,words:1043},title:"C++语言进阶：从C到C++的华丽转身",type:"article"}}],["/programming-languages/csharp/",{loader:()=>a.e(6448).then(a.bind(a,158)),meta:{date:1757861894e3,excerpt:'\n<p>C#（发音为"See Sharp"）是微软开发的一种现代、面向对象的编程语言，由安德斯·海尔斯伯格（Anders Hejlsberg）领导的团队设计。它结合了C++的强大功能和Visual Basic的易用性，特别适合Windows平台开发。</p>\n<h2>C#特点</h2>\n<ul>\n<li><strong>简单易学</strong>：语法清晰，减少了许多常见的编程错误</li>\n<li><strong>面向对象</strong>：全面支持面向对象编程概念</li>\n<li><strong>类型安全</strong>：强类型系统，减少运行时错误</li>\n<li><strong>跨平台</strong>：<a href="http://xn--863a9f.NET" target="_blank" rel="noopener noreferrer">通过.NET</a> Core可以在Windows、macOS和Linux上运行</li>\n<li><strong>丰富的类库</strong>：提供了大量现成的功能和API</li>\n</ul>',readingTime:{minutes:1.37,words:410},title:"C#基础学习",type:"article"}}],["/programming-languages/java/",{loader:()=>a.e(4567).then(a.bind(a,7003)),meta:{date:1757861894e3,excerpt:'\n<p>Java是一种广泛使用的计算机编程语言，由詹姆斯·高斯林（James Gosling）领导的Sun Microsystems团队于1995年开发。Java以其"一次编写，到处运行"（Write Once, Run Anywhere）的跨平台特性而闻名。</p>\n<h2>Java特点</h2>\n<ul>\n<li><strong>跨平台性</strong>：Java程序可以在任何带有JVM（Java虚拟机）的平台上运行</li>\n<li><strong>面向对象</strong>：Java是一种纯面向对象的编程语言</li>\n<li><strong>安全性</strong>：内置了安全管理器，提供安全API</li>\n<li><strong>健壮性</strong>：强类型检查、自动内存管理（垃圾回收）等特性</li>\n<li><strong>多线程支持</strong>：内置多线程处理机制</li>\n</ul>',readingTime:{minutes:1.38,words:415},title:"Java基础学习",type:"article"}}],["/programming-languages/python/",{loader:()=>a.e(621).then(a.bind(a,9139)),meta:{date:1757861894e3,excerpt:"\n<p>Python是一种简单易学且功能强大的编程语言，由吉多·范罗苏姆（Guido van Rossum）于1991年创建。Python以其简洁的语法和强大的库支持而闻名，被广泛应用于Web开发、数据分析、人工智能等领域。</p>\n<h2>Python特点</h2>\n<ul>\n<li><strong>易学易用</strong>：语法简洁清晰，代码可读性高</li>\n<li><strong>解释执行</strong>：无需编译，可以直接运行</li>\n<li><strong>丰富的库</strong>：拥有大量的第三方库，适用于各种领域</li>\n<li><strong>跨平台</strong>：可以在Windows、macOS和Linux上运行</li>\n<li><strong>面向对象</strong>：支持面向对象编程，但也支持函数式编程和过程式编程</li>\n</ul>",readingTime:{minutes:1.42,words:427},title:"Python基础学习",type:"article"}}],["/404.html",{loader:()=>a.e(7490).then(a.bind(a,9866)),meta:{title:""}}],["/category/",{loader:()=>a.e(3583).then(a.bind(a,1623)),meta:{title:"分类",index:!1}}],["/tag/",{loader:()=>a.e(1797).then(a.bind(a,8685)),meta:{title:"标签",index:!1}}],["/article/",{loader:()=>a.e(7511).then(a.bind(a,1982)),meta:{title:"文章",index:!1}}],["/star/",{loader:()=>a.e(7199).then(a.bind(a,5887)),meta:{title:"星标",index:!1}}],["/timeline/",{loader:()=>a.e(5464).then(a.bind(a,9322)),meta:{title:"时间轴",index:!1}}]])},8761:(i,s,a)=>{a.d(s,{U:()=>n});const n=JSON.parse('{"base":"/GahooChenBlog/","lang":"zh-CN","title":"GahooChen的个人博客","description":"分享技术，分享快乐","head":[["link",{"rel":"icon","href":"/GahooChenBlog/favicon.ico"}]],"locales":{}}')}},i=>{i.O(0,[1363,7258],()=>i(i.s=1978)),i.O()}]);