"use strict";(self.webpackChunkgahoochen_blog=self.webpackChunkgahoochen_blog||[]).push([[6923],{88:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>h});var n=a(4089);const e={},l=(0,a(3221).A)(e,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,[...i[0]||(i[0]=[(0,n.Fv)('<h1 id="函数基础概念" tabindex="-1"><a class="header-anchor" href="#函数基础概念"><span>函数基础概念</span></a></h1><p>函数是编程中最基本、最重要的概念之一，它是一段具有特定功能的代码块，可以接受输入参数，执行特定的操作，并返回结果。在这篇文章中，我们将介绍函数的基本概念、特点、类型和应用场景。</p><h2 id="一、什么是函数" tabindex="-1"><a class="header-anchor" href="#一、什么是函数"><span>一、什么是函数？</span></a></h2><p>函数是一种封装了特定功能的代码块，它可以被多次调用和复用。函数的主要作用是将复杂的问题分解为多个简单的子问题，每个子问题对应一个函数，从而提高代码的可读性、可维护性和可复用性。</p><p>在编程中，函数通常包括以下几个部分：</p><ul><li><strong>函数名</strong>：用于标识函数的名称</li><li><strong>参数列表</strong>：函数接受的输入值</li><li><strong>函数体</strong>：包含实现特定功能的代码</li><li><strong>返回值</strong>：函数执行后返回的结果</li></ul><h2 id="二、函数的基本特点" tabindex="-1"><a class="header-anchor" href="#二、函数的基本特点"><span>二、函数的基本特点</span></a></h2><h3 id="_2-1-封装性" tabindex="-1"><a class="header-anchor" href="#_2-1-封装性"><span>2.1 封装性</span></a></h3><p>函数将一段代码封装在一个命名的代码块中，隐藏了实现细节，只暴露输入和输出接口。这使得代码更加模块化，便于理解和维护。</p><h3 id="_2-2-可复用性" tabindex="-1"><a class="header-anchor" href="#_2-2-可复用性"><span>2.2 可复用性</span></a></h3><p>函数可以被多次调用和复用，避免了代码的重复编写，提高了开发效率。</p><h3 id="_2-3-抽象性" tabindex="-1"><a class="header-anchor" href="#_2-3-抽象性"><span>2.3 抽象性</span></a></h3><p>函数提供了一种抽象机制，它只关注做什么，而不关心如何做。用户只需要知道函数的功能和接口，而不需要了解函数的内部实现细节。</p><h3 id="_2-4-独立性" tabindex="-1"><a class="header-anchor" href="#_2-4-独立性"><span>2.4 独立性</span></a></h3><p>函数是相对独立的代码单元，它有自己的作用域，函数内部的变量和操作不会影响函数外部的代码（除非使用了全局变量或引用传递）。</p><h2 id="三、函数的类型" tabindex="-1"><a class="header-anchor" href="#三、函数的类型"><span>三、函数的类型</span></a></h2><h3 id="_3-1-根据参数和返回值分类" tabindex="-1"><a class="header-anchor" href="#_3-1-根据参数和返回值分类"><span>3.1 根据参数和返回值分类</span></a></h3><h4 id="_3-1-1-无参无返回值函数" tabindex="-1"><a class="header-anchor" href="#_3-1-1-无参无返回值函数"><span>3.1.1 无参无返回值函数</span></a></h4><p>这类函数不接受任何参数，也不返回任何结果，它只执行一些特定的操作。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>function sayHello() {</span></span>\n<span class="line"><span>    console.log(&quot;Hello, World!&quot;);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-2-无参有返回值函数" tabindex="-1"><a class="header-anchor" href="#_3-1-2-无参有返回值函数"><span>3.1.2 无参有返回值函数</span></a></h4><p>这类函数不接受参数，但会返回一个结果。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>function getRandomNumber() {</span></span>\n<span class="line"><span>    return Math.random();</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-3-有参无返回值函数" tabindex="-1"><a class="header-anchor" href="#_3-1-3-有参无返回值函数"><span>3.1.3 有参无返回值函数</span></a></h4><p>这类函数接受参数，但不返回结果，它使用参数执行一些操作。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>function printMessage(message) {</span></span>\n<span class="line"><span>    console.log(message);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-4-有参有返回值函数" tabindex="-1"><a class="header-anchor" href="#_3-1-4-有参有返回值函数"><span>3.1.4 有参有返回值函数</span></a></h4><p>这类函数既接受参数，也返回结果，它使用参数进行计算，并返回计算结果。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>function add(a, b) {</span></span>\n<span class="line"><span>    return a + b;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-根据函数的特性分类" tabindex="-1"><a class="header-anchor" href="#_3-2-根据函数的特性分类"><span>3.2 根据函数的特性分类</span></a></h3><h4 id="_3-2-1-纯函数" tabindex="-1"><a class="header-anchor" href="#_3-2-1-纯函数"><span>3.2.1 纯函数</span></a></h4><p>纯函数是指对相同的输入总是产生相同的输出，且没有副作用的函数。纯函数不依赖于外部状态，也不会修改外部状态。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>function multiply(a, b) {</span></span>\n<span class="line"><span>    return a * b;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-2-非纯函数" tabindex="-1"><a class="header-anchor" href="#_3-2-2-非纯函数"><span>3.2.2 非纯函数</span></a></h4><p>非纯函数是指对相同的输入可能产生不同的输出，或者有副作用的函数。非纯函数可能依赖于外部状态，或者会修改外部状态。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>let counter = 0;</span></span>\n<span class="line"><span>function increment() {</span></span>\n<span class="line"><span>    counter++;</span></span>\n<span class="line"><span>    return counter;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-3-递归函数" tabindex="-1"><a class="header-anchor" href="#_3-2-3-递归函数"><span>3.2.3 递归函数</span></a></h4><p>递归函数是指在函数内部调用自身的函数。递归函数通常用于解决可以分解为相同问题的子问题的问题。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>function factorial(n) {</span></span>\n<span class="line"><span>    if (n &lt;= 1) {</span></span>\n<span class="line"><span>        return 1;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    return n * factorial(n - 1);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-4-高阶函数" tabindex="-1"><a class="header-anchor" href="#_3-2-4-高阶函数"><span>3.2.4 高阶函数</span></a></h4><p>高阶函数是指可以接受函数作为参数，或者返回函数作为结果的函数。高阶函数是函数式编程的重要概念。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>function applyOperation(a, b, operation) {</span></span>\n<span class="line"><span>    return operation(a, b);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、函数的参数传递" tabindex="-1"><a class="header-anchor" href="#四、函数的参数传递"><span>四、函数的参数传递</span></a></h2><h3 id="_4-1-值传递" tabindex="-1"><a class="header-anchor" href="#_4-1-值传递"><span>4.1 值传递</span></a></h3><p>在值传递中，函数接收的是参数值的副本，函数内部对参数的修改不会影响到函数外部的原始值。</p><p>大多数编程语言中，基本数据类型（如整数、浮点数、布尔值等）都是通过值传递的方式传递给函数的。</p><h3 id="_4-2-引用传递" tabindex="-1"><a class="header-anchor" href="#_4-2-引用传递"><span>4.2 引用传递</span></a></h3><p>在引用传递中，函数接收的是参数的引用（地址），函数内部对参数的修改会影响到函数外部的原始值。</p><p>大多数编程语言中，复合数据类型（如数组、对象等）都是通过引用传递的方式传递给函数的。</p><h3 id="_4-3-参数默认值" tabindex="-1"><a class="header-anchor" href="#_4-3-参数默认值"><span>4.3 参数默认值</span></a></h3><p>参数默认值是指在定义函数时为参数指定默认值，当调用函数时如果没有提供该参数，则使用默认值。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>function greet(name = &quot;World&quot;) {</span></span>\n<span class="line"><span>    return `Hello, ${name}!`;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-可变参数" tabindex="-1"><a class="header-anchor" href="#_4-4-可变参数"><span>4.4 可变参数</span></a></h3><p>可变参数是指函数可以接受任意数量的参数，这些参数会被收集到一个数组或类似的数据结构中。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>function sum(...numbers) {</span></span>\n<span class="line"><span>    return numbers.reduce((total, num) =&gt; total + num, 0);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、函数的作用域" tabindex="-1"><a class="header-anchor" href="#五、函数的作用域"><span>五、函数的作用域</span></a></h2><h3 id="_5-1-全局作用域" tabindex="-1"><a class="header-anchor" href="#_5-1-全局作用域"><span>5.1 全局作用域</span></a></h3><p>在全局作用域中定义的函数可以在程序的任何地方被访问和调用。</p><h3 id="_5-2-局部作用域" tabindex="-1"><a class="header-anchor" href="#_5-2-局部作用域"><span>5.2 局部作用域</span></a></h3><p>在函数内部定义的函数（嵌套函数）只能在定义它的函数内部被访问和调用，外部无法访问。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>function outer() {</span></span>\n<span class="line"><span>    function inner() {</span></span>\n<span class="line"><span>        console.log(&quot;This is the inner function.&quot;);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    inner();  // 可以在outer函数内部调用inner函数</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>outer();</span></span>\n<span class="line"><span>// inner();  // 错误：无法在outer函数外部调用inner函数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、函数的返回值" tabindex="-1"><a class="header-anchor" href="#六、函数的返回值"><span>六、函数的返回值</span></a></h2><h3 id="_6-1-单一返回值" tabindex="-1"><a class="header-anchor" href="#_6-1-单一返回值"><span>6.1 单一返回值</span></a></h3><p>大多数函数都有一个单一的返回值，可以是任何数据类型。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>function square(x) {</span></span>\n<span class="line"><span>    return x * x;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-多个返回值" tabindex="-1"><a class="header-anchor" href="#_6-2-多个返回值"><span>6.2 多个返回值</span></a></h3><p>有些编程语言支持函数返回多个值，这些值通常会被包装成一个元组或类似的数据结构。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> get_min_max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">numbers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> min</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(numbers), </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(numbers)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-无返回值" tabindex="-1"><a class="header-anchor" href="#_6-3-无返回值"><span>6.3 无返回值</span></a></h3><p>有些函数不返回任何值，这种情况下，函数通常会执行一些操作，如打印输出、修改全局变量等。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>function logMessage(message) {</span></span>\n<span class="line"><span>    console.log(message);</span></span>\n<span class="line"><span>    // 没有return语句，隐式返回undefined（在JavaScript中）</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七、函数在不同编程范式中的应用" tabindex="-1"><a class="header-anchor" href="#七、函数在不同编程范式中的应用"><span>七、函数在不同编程范式中的应用</span></a></h2><h3 id="_7-1-面向过程编程中的函数" tabindex="-1"><a class="header-anchor" href="#_7-1-面向过程编程中的函数"><span>7.1 面向过程编程中的函数</span></a></h3><p>在面向过程编程中，函数是程序的基本构建块，程序的执行就是按照一定的顺序调用这些函数。</p><h3 id="_7-2-面向对象编程中的函数-方法" tabindex="-1"><a class="header-anchor" href="#_7-2-面向对象编程中的函数-方法"><span>7.2 面向对象编程中的函数（方法）</span></a></h3><p>在面向对象编程中，函数（通常称为方法）被封装在类中，与数据（属性）结合在一起。方法是对象的行为，它可以访问和修改对象的属性。</p><h3 id="_7-3-函数式编程中的函数" tabindex="-1"><a class="header-anchor" href="#_7-3-函数式编程中的函数"><span>7.3 函数式编程中的函数</span></a></h3><p>在函数式编程中，函数被视为&quot;一等公民&quot;，它可以像其他数据类型一样被传递、赋值和返回。函数式编程强调使用纯函数，避免副作用。</p><h2 id="八、函数的设计原则" tabindex="-1"><a class="header-anchor" href="#八、函数的设计原则"><span>八、函数的设计原则</span></a></h2><p>为了编写高质量的函数，我们应该遵循一些设计原则：</p><h3 id="_8-1-单一职责原则" tabindex="-1"><a class="header-anchor" href="#_8-1-单一职责原则"><span>8.1 单一职责原则</span></a></h3><p>一个函数应该只负责一项功能，不要让一个函数做太多的事情。函数的职责越单一，它就越容易理解、测试和维护。</p><h3 id="_8-2-函数名应该清晰明了" tabindex="-1"><a class="header-anchor" href="#_8-2-函数名应该清晰明了"><span>8.2 函数名应该清晰明了</span></a></h3><p>函数名应该准确地描述函数的功能，让读者一眼就能知道这个函数是做什么的。函数名通常使用动词或动词短语。</p><h3 id="_8-3-函数应该保持简短" tabindex="-1"><a class="header-anchor" href="#_8-3-函数应该保持简短"><span>8.3 函数应该保持简短</span></a></h3><p>函数应该尽可能地简短，一般来说，一个函数的代码行数不应该超过一屏。如果一个函数太长，说明它可能承担了太多的职责，应该考虑将其拆分为多个小函数。</p><h3 id="_8-4-函数的参数应该适量" tabindex="-1"><a class="header-anchor" href="#_8-4-函数的参数应该适量"><span>8.4 函数的参数应该适量</span></a></h3><p>函数的参数数量应该适量，一般来说，一个函数的参数数量不应该超过3-5个。如果参数太多，说明这个函数可能承担了太多的职责，或者参数可以被封装成一个对象。</p><h3 id="_8-5-避免使用全局变量" tabindex="-1"><a class="header-anchor" href="#_8-5-避免使用全局变量"><span>8.5 避免使用全局变量</span></a></h3><p>函数应该尽量避免使用全局变量，因为全局变量会增加函数之间的耦合度，使代码难以理解和维护。如果函数需要访问外部数据，应该通过参数传递。</p><h3 id="_8-6-提供有意义的错误处理" tabindex="-1"><a class="header-anchor" href="#_8-6-提供有意义的错误处理"><span>8.6 提供有意义的错误处理</span></a></h3><p>函数应该提供有意义的错误处理机制，当函数执行失败时，应该给出明确的错误信息，帮助调用者快速定位问题。</p><h2 id="九、函数的代码示例" tabindex="-1"><a class="header-anchor" href="#九、函数的代码示例"><span>九、函数的代码示例</span></a></h2><p>下面是一些不同类型函数的代码示例：</p><h3 id="_9-1-基本函数示例" tabindex="-1"><a class="header-anchor" href="#_9-1-基本函数示例"><span>9.1 基本函数示例</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义一个计算矩形面积的函数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> calculate_rectangle_area</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;计算矩形的面积</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    </span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Args:</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        length: 矩形的长度</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        width: 矩形的宽度</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    </span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Returns:</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        矩形的面积</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> length </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> width</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 调用函数</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">area </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> calculate_rectangle_area</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;矩形的面积是: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">area</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-2-递归函数示例" tabindex="-1"><a class="header-anchor" href="#_9-2-递归函数示例"><span>9.2 递归函数示例</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义一个计算斐波那契数列的递归函数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fibonacci</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;计算斐波那契数列的第n项</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    </span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Args:</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        n: 项数</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    </span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Returns:</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        斐波那契数列的第n项</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    elif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> fibonacci</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> fibonacci</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 调用函数</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> fibonacci</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;斐波那契数列的第10项是: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">result</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-3-高阶函数示例" tabindex="-1"><a class="header-anchor" href="#_9-3-高阶函数示例"><span>9.3 高阶函数示例</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义一个高阶函数，它接受一个函数作为参数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> apply_operation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">numbers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> operation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;对列表中的每个元素应用指定的操作</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    </span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Args:</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        numbers: 数字列表</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        operation: 要应用的操作（函数）</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    </span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Returns:</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        应用操作后的结果列表</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> number </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> numbers:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        result.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">operation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(number))</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义一些简单的操作函数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> square</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cube</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 调用高阶函数</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">numbers </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">squared_numbers </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> apply_operation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(numbers, square)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cubed_numbers </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> apply_operation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(numbers, cube)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;原始列表: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">numbers</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;平方列表: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">squared_numbers</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;立方列表: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cubed_numbers</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-4-闭包示例" tabindex="-1"><a class="header-anchor" href="#_9-4-闭包示例"><span>9.4 闭包示例</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义一个创建计数器的函数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> create_counter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;创建一个计数器函数</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    </span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Returns:</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        一个计数器函数，每次调用时返回当前计数值并将计数值加1</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用列表来存储计数值，以便在内部函数中修改</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> counter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;计数器函数&quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        count[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> count[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> counter</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建一个计数器</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">counter1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> create_counter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 调用计数器函数</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">counter1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 1</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">counter1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 2</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">counter1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 3</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建另一个计数器</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">counter2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> create_counter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">counter2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 1 (新的计数器从1开始)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十、小结" tabindex="-1"><a class="header-anchor" href="#十、小结"><span>十、小结</span></a></h2><p>函数是编程中最基本、最重要的概念之一，它是一段具有特定功能的代码块，可以接受输入参数，执行特定的操作，并返回结果。函数具有封装性、可复用性、抽象性和独立性等特点，它可以帮助我们将复杂的问题分解为多个简单的子问题，提高代码的可读性、可维护性和可复用性。</p><p>了解函数的基本概念、类型、参数传递方式和设计原则，有助于我们编写高质量的代码，为解决各种编程问题打下坚实的基础。</p>',105)])])}]]),h=JSON.parse('{"path":"/programming-languages/common-concepts/03-functions-basics.html","title":"函数基础概念","lang":"zh-CN","frontmatter":{"description":"函数基础概念 函数是编程中最基本、最重要的概念之一，它是一段具有特定功能的代码块，可以接受输入参数，执行特定的操作，并返回结果。在这篇文章中，我们将介绍函数的基本概念、特点、类型和应用场景。 一、什么是函数？ 函数是一种封装了特定功能的代码块，它可以被多次调用和复用。函数的主要作用是将复杂的问题分解为多个简单的子问题，每个子问题对应一个函数，从而提高代...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数基础概念\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-22T13:31:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GahooChan\\",\\"url\\":\\"https://gitee.com/GahooChan\\"}]}"],["meta",{"property":"og:url","content":"https://GahooChan.github.io/GahooChanBlog/programming-languages/common-concepts/03-functions-basics.html"}],["meta",{"property":"og:site_name","content":"GahooChan的个人博客"}],["meta",{"property":"og:title","content":"函数基础概念"}],["meta",{"property":"og:description","content":"函数基础概念 函数是编程中最基本、最重要的概念之一，它是一段具有特定功能的代码块，可以接受输入参数，执行特定的操作，并返回结果。在这篇文章中，我们将介绍函数的基本概念、特点、类型和应用场景。 一、什么是函数？ 函数是一种封装了特定功能的代码块，它可以被多次调用和复用。函数的主要作用是将复杂的问题分解为多个简单的子问题，每个子问题对应一个函数，从而提高代..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-22T13:31:05.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-22T13:31:05.000Z"}]]},"git":{"createdTime":1758547865000,"updatedTime":1758547865000,"contributors":[{"name":"GahooChen","username":"GahooChen","email":"2432168423@qq.com","commits":1,"url":"https://github.com/GahooChen"}]},"readingTime":{"minutes":9.07,"words":2722},"filePathRelative":"programming-languages/common-concepts/03-functions-basics.md","excerpt":"\\n<p>函数是编程中最基本、最重要的概念之一，它是一段具有特定功能的代码块，可以接受输入参数，执行特定的操作，并返回结果。在这篇文章中，我们将介绍函数的基本概念、特点、类型和应用场景。</p>\\n<h2>一、什么是函数？</h2>\\n<p>函数是一种封装了特定功能的代码块，它可以被多次调用和复用。函数的主要作用是将复杂的问题分解为多个简单的子问题，每个子问题对应一个函数，从而提高代码的可读性、可维护性和可复用性。</p>\\n<p>在编程中，函数通常包括以下几个部分：</p>\\n<ul>\\n<li><strong>函数名</strong>：用于标识函数的名称</li>\\n<li><strong>参数列表</strong>：函数接受的输入值</li>\\n<li><strong>函数体</strong>：包含实现特定功能的代码</li>\\n<li><strong>返回值</strong>：函数执行后返回的结果</li>\\n</ul>","autoDesc":true}')},3221:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}}}]);