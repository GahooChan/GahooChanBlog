"use strict";(self.webpackChunkgahoochen_blog=self.webpackChunkgahoochen_blog||[]).push([[3524],{939:(i,s,n)=>{n.d(s,{B:()=>q});var a={};n.r(a),n.d(a,{default:()=>m});var l={};n.r(l);var t={};n.r(t);var e={};n.r(e),n.d(e,{default:()=>y});var h={};n.r(h);var p={};n.r(p),n.d(p,{default:()=>F});var r={};n.r(r),n.d(r,{default:()=>D});var k={};n.r(k);var d={};n.r(d);var g={};n.r(g),n.d(g,{default:()=>S});var o={};n.r(o),n.d(o,{default:()=>O});var c={};n.r(c),n.d(c,{default:()=>Q});var A=n(9345);const m={enhance:({app:i})=>{i.component("GitContributors",A.B)}},y=(0,n(4898).re)({enhance:({app:i})=>{}});var B=n(5214),u=n(6063),v=n(3718);const F={enhance:({app:i})=>{i.component("CodeTabs",u.S),i.component("Tabs",v.t)}};var C=n(5770),b=n(5058);const D={enhance:({app:i})=>{i.component("CodeDemo",C.A),i.component("MdDemo",b.A)}};var f=n(4937),E=n(829),x=n(9478),P=n(7481),w=n(1625),T=n(4089),I=n(1817);const S={enhance:({app:i})=>{(0,P.L)("VPIcon")||i.component("VPIcon",i=>(0,T.h)(I.G,{type:"iconify",prefix:"fa6-solid:",...i}))},setup:()=>{(0,w.r9V)("https://cdn.jsdelivr.net/npm/iconify-icon@2")}};var L=n(1618),G=n(283),_=n(5906);n(2055);const O={enhance:({app:i})=>{(0,P.L)("Badge")||i.component("Badge",G.A),(0,P.L)("VPCard")||i.component("VPCard",_.A)},setup:()=>{},rootComponents:[]};var M=n(280),N=n(6602),J=n(4142),R=n(196),W=n(9441),j=n(7884),U=n(9601),z=n(1090),V=n(388),H=n(660);n(2598),n(8977),n(184),n(393),(0,z.M_)(i=>{const s=i.title,n=i.index??!0,a=i.icon;return n?{title:s,content:a?()=>[(0,T.h)((0,T.g2)("VPIcon"),{icon:a,sizing:"both"}),s]:null,order:i.order,index:i.index}:null});const Q={enhance:({app:i,router:s})=>{const{scrollBehavior:n}=s.options;s.options.scrollBehavior=async(...i)=>(await W.s.wait(),n(...i)),(0,j.i)(i),i.component("BloggerInfo",V.l),i.component("SocialMedias",V.k)},setup:()=>{(0,j.s)(),(0,j.a)(),(0,H.su)()},layouts:{Layout:U.L,NotFound:U.N,Blog:V.B}},q=[a,l,t,e,h,B,p,r,k,d,f,E,x,g,L,o,M,N,J,R,c].map(i=>i.default).filter(Boolean)},1709:(i,s,n)=>{n.d(s,{l:()=>a});const a=JSON.parse('{"category":{"/":{"path":"/category/","map":{}}},"tag":{"/":{"path":"/tag/","map":{}}}}')},2878:(i,s,n)=>{n.d(s,{P:()=>a});const a={}},3781:(i,s,n)=>{n.d(s,{U:()=>a});const a=JSON.parse('{"article":{"/":{"path":"/article/","indexes":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82]}},"star":{"/":{"path":"/star/","indexes":[]}},"timeline":{"/":{"path":"/timeline/","indexes":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82]}}}')},4776:(i,s,n)=>{n.d(s,{M:()=>a});const a=JSON.parse('["/blog_story.html","/programming-languages/common-concepts/01-procedural-programming.html","/programming-languages/common-concepts/02-object-oriented-programming.html","/programming-languages/common-concepts/03-functions-basics.html","/programming-languages/common-concepts/04-data-structures-basics.html","/programming-languages/common-concepts/05-algorithms-basics.html","/programming-languages/math-calculations/02-vector-operations.html","/programming-languages/math-calculations/03-matrix-operations.html","/programming-languages/math-calculations/","/programming-languages/programming-tools/01-cmake-basics.html","/programming-languages/programming-tools/02-git-basics.html","/programming-languages/programming-tools/","/programming-languages/python/01-first-program.html","/programming-languages/python/02-variables-data-types.html","/programming-languages/python/03-operators-expressions.html","/programming-languages/python/04-input-output.html","/programming-languages/python/05-conditional-statements.html","/programming-languages/python/06-loop-statements.html","/programming-languages/python/07-practice-summary.html","/programming-languages/python/08-lists.html","/programming-languages/python/09-tuples-sets-dictionaries.html","/programming-languages/python/10-strings-and-regular-expressions.html","/programming-languages/python/11-functions.html","/programming-languages/python/12-modules-packages.html","/programming-languages/python/13-exceptions-handling.html","/programming-languages/python/14-file-handling.html","/programming-languages/python/15-object-oriented-programming.html","/programming-languages/python/16-advanced-oop.html","/programming-languages/python/17-iterators-generators-coroutines.html","/programming-languages/python/18-context-managers-decorators.html","/programming-languages/python/19-advanced-topics.html","/programming-languages/python/20-concurrency.html","/programming-languages/python/21-network-programming.html","/programming-languages/python/22-database-programming.html","/programming-languages/python/23-gui-programming.html","/programming-languages/python/24-graphics-and-multimedia.html","/programming-languages/python/25-scientific-computing-data-analysis.html","/programming-languages/c/08-bitwise-operations.html","/programming-languages/common-concepts/","/programming-languages/cpp/01-getting-started.html","/programming-languages/cpp/02-enhanced-data-types.html","/programming-languages/cpp/03-io-operations.html","/programming-languages/cpp/04-enhanced-functions.html","/programming-languages/cpp/05-classes-objects.html","/programming-languages/cpp/06-constructors-destructors.html","/programming-languages/cpp/07-inheritance-polymorphism.html","/programming-languages/cpp/08-operator-overloading.html","/programming-languages/cpp/09-templates.html","/programming-languages/cpp/10-standard-library-containers.html","/programming-languages/cpp/11-standard-library-algorithms.html","/programming-languages/cpp/12-exception-handling.html","/programming-languages/cpp/13-raii-resource-management.html","/programming-languages/cpp/14-namespaces.html","/programming-languages/cpp/15-stl-algorithms.html","/programming-languages/cpp/16-memory-model.html","/programming-languages/cpp/17-multithreading.html","/programming-languages/cpp/18-move-semantics.html","/programming-languages/cpp/19-smart-pointers.html","/programming-languages/cpp/20-modern-cpp-features.html","/programming-languages/math-calculations/01-number-systems-bitwise-principles.html","/programming-languages/c/01-first-program.html","/programming-languages/c/02-variables-data-types.html","/programming-languages/c/03-operators.html","/programming-languages/c/04-control-statements.html","/programming-languages/c/05-loops.html","/programming-languages/c/06-practice-summary.html","/programming-languages/c/07-functions-arrays.html","/programming-languages/c/09-practice-functions-arrays.html","/programming-languages/c/10-pointers-basics.html","/programming-languages/c/11-memory-management.html","/programming-languages/c/12-algorithm-basics.html","/programming-languages/c/13-structs-unions.html","/programming-languages/c/14-file-io.html","/programming-languages/c/15-sorting-algorithms.html","/programming-languages/c/16-searching-algorithms.html","/problems/","/programming-languages/","/programming-languages/c/","/programming-languages/cpp/","/programming-languages/csharp/","/programming-languages/java/","/programming-languages/python/","/intro.html"]')},4923:(i,s,n)=>{},6653:(i,s,n)=>{n.d(s,{K:()=>a});const a=JSON.parse('{"encrypt":{},"author":{"name":"GahooChen","url":"https://gitee.com/GahooChen"},"logo":"/avatar/GahooChen.png","docsDir":"src","footer":"GahooChen的个人博客","displayFooter":true,"blog":{"description":"一个软件工程师，主C++，熟悉Qt、MFC、CLR，C#，Python，Java等等主流编程语言也略懂一二，都做过一些项目","intro":"/intro.html","medias":{}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","contributors":"贡献者","editLink":"编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"routerLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":["/",{"text":"个人简介","icon":"user","link":"/intro.md"},{"text":"博客心路历程","icon":"book-open","link":"/blog_story.md"},{"text":"开发问题记录与分享","icon":"bug","link":"/problems/"},{"text":"编程语言基础与算法学习","icon":"code","link":"/programming-languages/"}],"sidebar":{"/":["","intro","blog_story",{"text":"开发问题记录与分享","icon":"bug","prefix":"problems/","children":"structure"},{"text":"编程语言基础与算法学习","icon":"code","prefix":"programming-languages/","children":["",{"text":"C语言","prefix":"c/","children":[""]},{"text":"C++","prefix":"cpp/","children":[""]},{"text":"C#","prefix":"csharp/","children":[""]},{"text":"Java","prefix":"java/","children":[""]},{"text":"Python","prefix":"python/","children":[""]},{"text":"通用概念","prefix":"common-concepts/","children":[""]},{"text":"数学计算","prefix":"math-calculations/","children":[""]},{"text":"编程工具","prefix":"programming-tools/","children":[""]}]}]}}}}')},8123:(i,s,n)=>{n.d(s,{v:()=>a});const a={"/problems/":[""]}},8164:(i,s,n)=>{n.d(s,{J:()=>l,c:()=>a});const a=JSON.parse("{}"),l=Object.fromEntries([["/",{loader:()=>n.e(4470).then(n.bind(n,1532)),meta:{title:"GahooChen的个人博客",icon:"house"}}],["/blog_story.html",{loader:()=>n.e(8858).then(n.bind(n,4160)),meta:{date:1758637633e3,excerpt:"<h2>🌟 为什么会有这个博客？</h2>\n<p>创建这个博客的想法，源于近期身体状况的变化。由于长期高强度工作，我不得不调整自己的工作节奏。在这个过程中，我开始思考如何利用这段相对从容的时光，为自己、也为后来的技术探索者做些有意义的事情。</p>\n<p>回望自己十余年的编程之路，从一个对代码一窍不通的高中生，到如今能够独立开发复杂CAM软件的工程师，我走过许多弯路，也积累了不少经验。这些经历让我深刻体会到：<strong>编程学习最困难的，往往不是知识本身，而是找不到正确的学习路径和解决问题的方法</strong>。</p>\n<h2>🚶‍♂️ 我的编程成长故事</h2>\n<h3>高二：编程启蒙的种子</h3>",readingTime:{minutes:6.39,words:1916},title:"博客创建的心路历程",icon:"book-open",type:"article"}}],["/intro.html",{loader:()=>n.e(3912).then(n.bind(n,7780)),meta:{date:1757856526e3,excerpt:"<h2>👋 你好，我是GahooChen</h2>\n<p>一名热爱技术、经历丰富且热衷于解决实际问题的软件工程师。</p>\n<h2>🎓 教育背景</h2>\n<ul>\n<li><strong>学历背景</strong>：国内某大专院校物联网应用技术专业毕业</li>\n<li><strong>编程起点</strong>：高二接触VB语言，开启编程兴趣</li>\n</ul>\n<h2>💼 工作经历</h2>\n<h3>C++ CAM软件研发工程师 | 某大型机床制造公司 | 三年前至今</h3>\n<ul>\n<li>负责机床加工CAM软件核心几何算法的优化与实现</li>\n<li>精通Qt、MFC、CAD二次开发、CLR、.NET等技术栈</li>\n<li>专注于碰撞算法、加工路径规划算法、三维仿真模拟算法研究</li>\n</ul>",readingTime:{minutes:2.05,words:616},title:"个人介绍",icon:"circle-info",type:"article"}}],["/problems/",{loader:()=>n.e(1099).then(n.bind(n,6228)),meta:{date:1758543559e3,excerpt:"\n<p>欢迎来到我的开发问题记录与分享专区！</p>\n<p>在软件开发的道路上，我们经常会遇到各种各样的技术难题和挑战。这个专区将记录我在日常开发过程中遇到的典型问题、解决方案以及心得体会，希望能够帮助到其他开发者。</p>\n<h2>内容分类</h2>\n<h3>🔧 编程错误与调试</h3>\n<p>记录在编码过程中遇到的各类错误信息、调试方法和解决方案。</p>\n<h3>🌐 网络与API</h3>\n<p>分享网络请求、API调用、接口调试等方面的经验和技巧。</p>\n<h3>🗃️ 数据库与存储</h3>\n<p>涵盖数据库设计、查询优化、数据迁移等相关内容。</p>\n<h3>🚀 性能优化</h3>",readingTime:{minutes:1.19,words:357},title:"开发问题记录与分享",type:"article"}}],["/programming-languages/",{loader:()=>n.e(8962).then(n.bind(n,934)),meta:{date:1758543559e3,excerpt:'\n<p>欢迎来到面向新手的编程语言基础语法与算法学习专区！</p>\n<p>本专区旨在为编程初学者提供系统、易懂的编程语言基础教程和算法学习资料。无论你是刚刚入门的编程新手，还是想要巩固基础知识的开发者，这里都能找到适合你的学习内容。</p>\n<h2>编程语言分类</h2>\n<h3>🔄 通用概念</h3>\n<p><a href="/GahooChenBlog/programming-languages/common-concepts/" target="_blank">通用编程语言概念</a>：包含适用于多种编程语言的基础概念和原理知识，如进制转换、位运算原理等。</p>\n<h3>📚 C语言</h3>',readingTime:{minutes:1.62,words:485},title:"编程语言基础与算法学习",type:"article"}}],["/programming-languages/c/01-first-program.html",{loader:()=>n.e(2811).then(n.bind(n,2347)),meta:{date:1758543589e3,excerpt:'\n<p>小朋友们，你们学说话的时候，是不是先学喊"爸爸妈妈"，然后才能说更多的话呢？学习C语言也是一样的道理！这一节我们要学习如何编写你的第一个C语言程序。</p>\n<h2>你好，世界！</h2>\n<p>让我们先来看一个最简单的C语言程序，就像你学写的第一个字一样：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"你好，世界！</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.45,words:734},title:"第一个C语言程序：向世界问好",type:"article"}}],["/programming-languages/c/02-variables-data-types.html",{loader:()=>n.e(953).then(n.bind(n,907)),meta:{date:1758543589e3,excerpt:'\n<p>小朋友们，你们有没有自己的小抽屉或者小盒子用来放各种各样的东西？比如，铅笔盒放铅笔，玩具箱放玩具，存钱罐放零花钱。在C语言中，我们也有类似的"小盒子"，它们叫做变量。</p>\n<h2>变量：计算机的小盒子</h2>\n<p>变量就像计算机里的小盒子，用来存放各种信息。比如，你可以用一个小盒子存放你的年龄，用另一个小盒子存放你的身高。</p>\n<p>在C语言中，我们需要告诉计算机这个小盒子要装什么类型的东西：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 整数类型的变量，存放年龄</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> height </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 145.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 小数类型的变量，存放身高</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> grade </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'A\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 字符类型的变量，存放成绩等级</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.64,words:1092},title:"变量和数据类型：计算机的收纳盒",type:"article"}}],["/programming-languages/c/03-operators.html",{loader:()=>n.e(6735).then(n.bind(n,9447)),meta:{date:1758543589e3,excerpt:'\n<p>小朋友们，你们平时做数学题的时候是不是会用到加减乘除这些运算符号？在C语言中，我们也有各种各样的运算符，它们就像是计算机的计算器，可以帮我们做各种计算。</p>\n<h2>算术运算符：数学计算</h2>\n<p>算术运算符就是我们平时数学中用到的加减乘除等运算符号：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">         // 加法：sum = 13</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> difference </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 减法：difference = 7</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> product </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     // 乘法：product = 30</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> quotient </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 除法：quotient = 3（注意：整数相除会去掉小数部分）</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> remainder </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   // 取余：remainder = 1（10除以3余1）</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.99,words:1197},title:"运算符：计算机的计算器",type:"article"}}],["/programming-languages/c/04-control-statements.html",{loader:()=>n.e(8221).then(n.bind(n,5167)),meta:{date:1758543589e3,excerpt:'\n<p>小朋友们，你们在生活中是不是会根据不同的情况做不同的决定呢？比如，如果天气好，你可能会去公园玩；如果下雨，你可能会留在家里看书。在C语言中，我们也可以让程序根据不同的条件做不同的事情，这就是控制语句的作用。</p>\n<h2>if语句：如果...就...</h2>\n<p><code>if</code>语句是最基本的控制语句，它的用法就像我们平时说的"如果...就..."一样：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> score </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 85</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (score </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 90</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"优秀！</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (score </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"良好！</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (score </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 60</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"及格！</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"加油！</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.14,words:943},title:"控制语句：让程序做决定",type:"article"}}],["/programming-languages/c/05-loops.html",{loader:()=>n.e(4503).then(n.bind(n,2806)),meta:{date:1758543589e3,excerpt:'\n<p>小朋友们，你们有没有过需要重复做某件事情的经历？比如，每天早晨起床、刷牙、洗脸，这些都是重复的事情。在C语言中，我们也经常需要让计算机重复做某件事情，这时候就可以使用循环语句。</p>\n<h2>while循环：当...的时候就继续做</h2>\n<p><code>while</code>循环的作用是：当某个条件为真时，就重复执行一段代码。它的基本结构是这样的：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (条件) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 要重复执行的代码</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.98,words:1193},title:"循环语句：重复做一件事",type:"article"}}],["/programming-languages/c/06-practice-summary.html",{loader:()=>n.e(4161).then(n.bind(n,7979)),meta:{date:1758543589e3,excerpt:'\n<p>小朋友们，现在我们已经学习了C语言的一些基础语法知识。让我们通过一些小练习来巩固一下所学的内容吧！</p>\n<h2>实战小练习</h2>\n<h3>练习1：计算1到100的和</h3>\n<p>让我们写一个程序来计算1到100的所有整数的和。这是一个经典的循环练习。</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 用来存储和</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> i;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 使用for循环计算1到100的和</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> i;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1到100的和是：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, sum);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:7.52,words:2256},title:"实战小练习与基础语法小结",type:"article"}}],["/programming-languages/c/07-functions-arrays.html",{loader:()=>n.e(8870).then(n.bind(n,6276)),meta:{date:1758543589e3,excerpt:'\n<p>小朋友们，你们有没有玩过搭积木？函数就像是已经拼好的积木块，可以反复使用；而数组就像是一排相同大小的盒子，可以整齐地存放很多东西。这一节我们来学习如何使用函数和数组让我们的程序变得更加有条理！</p>\n<h2>函数：可以重复使用的代码块</h2>\n<p>你们有没有发现，有时候我们在程序中会多次用到相同的代码？这时候就可以把这些代码封装成一个函数，就像把常用的积木块提前拼好一样。</p>\n<h3>函数的定义与调用</h3>\n<p>让我们来看一个计算长方形面积的函数：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 函数定义：计算长方形的面积</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateArea</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> area </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> length </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> width;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> area;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 返回计算结果</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> roomLength </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> roomWidth </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> classroomLength </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> classroomWidth </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 调用函数计算房间面积</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> roomArea </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateArea</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(roomLength, roomWidth);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"房间的面积是：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">平方米</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, roomArea);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 再次调用函数计算教室面积</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> classroomArea </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateArea</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(classroomLength, classroomWidth);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"教室的面积是：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">平方米</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, classroomArea);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.87,words:1461},title:"函数与数组：让程序更有条理",type:"article"}}],["/programming-languages/c/08-bitwise-operations.html",{loader:()=>n.e(9111).then(n.bind(n,8253)),meta:{date:1758543646e3,excerpt:'\n<p>小朋友们，你们知道计算机是怎么存储数字的吗？其实，计算机内部是用二进制数（只有0和1）来表示所有信息的。位运算符就是直接操作这些二进制位的特殊工具！</p>\n<p>如果你想了解更多关于二进制和其他进制的知识，以及它们之间的转换方法，可以阅读<a href="/GahooChenBlog/programming-languages/common-concepts/01-number-systems-bitwise-principles.html" target="_blank">进制转换与位运算原理</a>这篇通用概念文章哦！</p>\n<h2>什么是位运算？</h2>\n<p>位运算是直接对整数在内存中的二进制位进行操作的运算。在C语言中，我们有6个位运算符，它们可以帮助我们高效地处理一些特殊的计算任务。</p>',readingTime:{minutes:3,words:900},title:"位运算符：计算机的二进制秘密",type:"article"}}],["/programming-languages/c/09-practice-functions-arrays.html",{loader:()=>n.e(4130).then(n.bind(n,1568)),meta:{date:1758543589e3,excerpt:'\n<p>小朋友们，上一节课我们学习了函数与数组的基础知识，现在让我们通过一些有趣的练习来巩固这些知识吧！这些练习就像是游戏中的关卡，完成它们可以帮助你更好地掌握编程技能！</p>\n<h2>练习一：计算数组的和与平均值</h2>\n<p>让我们来编写一个程序，计算一个数组中所有元素的和与平均值。我们可以定义一个函数来计算和，再定义另一个函数来计算平均值。</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 计算数组中所有元素的和</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateSum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> numbers</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> size; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">+=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> numbers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[i];</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sum;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 计算数组中所有元素的平均值</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">float</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateAverage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> numbers</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateSum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(numbers, size);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> size;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> scores</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">85</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">92</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">78</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">90</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">88</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> size </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateSum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(scores, size);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> average </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> calculateAverage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(scores, size);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"数组元素的和：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, sum);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"数组元素的平均值：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%.2f</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, average);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.65,words:1395},title:"函数与数组练习：巩固你的编程技能",type:"article"}}],["/programming-languages/c/10-pointers-basics.html",{loader:()=>n.e(7496).then(n.bind(n,2039)),meta:{date:1758543589e3,excerpt:'\n<p>小朋友们，你们有没有想过，当我们在电脑上玩游戏、看视频或者写作业的时候，电脑是怎么记住这些信息的呢？今天我们要一起来探索计算机的"小仓库"——内存，以及如何用指针来访问这个仓库！</p>\n<h2>内存是什么？</h2>\n<p>内存就像计算机的小仓库，用来临时存放正在使用的信息。当我们打开一个程序时，这个程序就被加载到内存中；当我们关闭程序时，这个程序占用的内存就会被释放出来，留给其他程序使用。</p>\n<p>想象一下，内存就像一个巨大的储物柜，里面有许多小格子，每个小格子都有一个唯一的编号（地址），每个小格子可以存放一些信息。</p>\n<h2>指针：指向内存的标签</h2>\n<p>指针就像是贴在储物柜上的标签，它告诉我们某个东西存放在哪个格子里。在C语言中，指针是一个变量，但它不像普通变量那样存储数据本身，而是存储数据在内存中的地址。</p>',readingTime:{minutes:11.77,words:3532},title:"指针基础：指向内存的标签",type:"article"}}],["/programming-languages/c/11-memory-management.html",{loader:()=>n.e(2152).then(n.bind(n,651)),meta:{date:1758543589e3,excerpt:"\n<p>小朋友们，上一节课我们学习了指针的基础知识，知道了指针是指向内存地址的标签。这一节课，我们要学习如何在程序运行时动态地管理内存空间，就像我们可以根据需要随时调整储物柜的大小一样！</p>\n<h2>为什么需要动态内存分配？</h2>\n<p>在之前的学习中，我们使用的变量和数组都是在程序编译时就确定了大小的。但有时候，我们在编写程序时并不知道需要使用多少内存。比如，当我们要编写一个成绩管理系统时，我们可能不知道会有多少学生的成绩需要存储。</p>\n<p>这时候，动态内存分配就派上用场了！它让我们可以在程序运行时根据实际需要申请和释放内存空间。</p>\n<h2>动态内存分配的函数</h2>\n",readingTime:{minutes:4.9,words:1470},title:"内存管理：按需使用仓库空间",type:"article"}}],["/programming-languages/c/12-algorithm-basics.html",{loader:()=>n.e(3169).then(n.bind(n,2913)),meta:{date:1758543589e3,excerpt:"\n<p>小朋友们，你们有没有想过，为什么计算机能够如此快速地完成各种复杂的任务？这不仅仅是因为计算机的硬件很强大，还因为计算机运行的程序中包含了各种聪明的算法！今天，我们就来学习一下算法的基础知识。</p>\n<h2>什么是算法？</h2>\n<p>算法是解决问题的步骤和方法，就像我们日常生活中做事的步骤一样。例如，当我们想要泡一杯奶茶时，我们需要：</p>\n<ol>\n<li>准备材料：奶茶粉、热水、杯子、勺子</li>\n<li>将奶茶粉倒入杯子中</li>\n<li>倒入适量的热水</li>\n<li>用勺子搅拌均匀</li>\n<li>一杯美味的奶茶就做好了</li>\n</ol>\n<p>这就是一个简单的算法！在计算机中，算法就是告诉计算机如何解决某个问题的一系列步骤。</p>",readingTime:{minutes:5.8,words:1739},title:"算法基础：让计算机更聪明地解决问题",type:"article"}}],["/programming-languages/c/13-structs-unions.html",{loader:()=>n.e(3594).then(n.bind(n,7053)),meta:{date:1758543589e3,excerpt:'\n<p>小朋友们，你们有没有整理过自己的书包？把课本放在一起，笔记本放在一起，铅笔、橡皮等文具放在铅笔盒里。在C语言中，我们也可以用结构体和共用体来整理不同类型的数据，让我们的程序更加有条理！</p>\n<h2>结构体：把不同类型的数据打包在一起</h2>\n<p>结构体就像是一个"数据打包盒"，可以把不同类型的数据放在一起。比如，我们可以用一个结构体来表示一个学生的信息，包括姓名、年龄、身高、成绩等。</p>\n<h3>结构体的定义与使用</h3>\n<p>让我们来看一个表示学生信息的结构体例子：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;string.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 定义一个名为Student的结构体</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Student {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">];</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 姓名</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> age;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">       // 年龄</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> height;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 身高</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> score;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   // 成绩</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 创建一个Student类型的变量</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Student stu1;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 给结构体成员赋值</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    strcpy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"小明"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 注意：字符串需要使用strcpy函数赋值</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">age</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">height</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 145.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">score</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 92.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 访问结构体成员</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"姓名：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"年龄：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">岁</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"身高：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%.1f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">厘米</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"成绩：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%.1f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">分</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 也可以在定义结构体变量的同时进行初始化</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Student stu2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"小红"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">142.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">88.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">另一个学生的信息：</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"姓名：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"年龄：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">岁</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"身高：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%.1f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">厘米</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"成绩：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%.1f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">分</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">stu2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:7.46,words:2237},title:"结构体与共用体：整理你的数据",type:"article"}}],["/programming-languages/c/14-file-io.html",{loader:()=>n.e(3143).then(n.bind(n,7094)),meta:{date:1758543589e3,excerpt:"\n<p>小朋友们，你们有没有写过日记或者画过画？当你写完日记或者画完画后，你会把它们保存起来，这样以后还可以再看。在C语言中，我们也可以让程序把数据保存到文件中，或者从文件中读取数据。这一节我们就来学习文件操作！</p>\n<h2>文件是什么？</h2>\n<p>文件是存储在计算机存储设备（如硬盘、U盘等）上的一组相关数据的集合。我们平时使用的文档、图片、音乐、视频等都是文件。</p>\n<p>在C语言中，文件可以分为两种类型：</p>\n<ol>\n<li><strong>文本文件</strong>：存储的是字符，可以用记事本等文本编辑器打开查看（就像你写的日记）</li>\n<li><strong>二进制文件</strong>：存储的是二进制数据，需要特定的程序才能打开查看（就像你画的画或者拍的照片）</li>\n</ol>",readingTime:{minutes:7.99,words:2396},title:"文件操作：让程序记住你的数据",type:"article"}}],["/programming-languages/c/15-sorting-algorithms.html",{loader:()=>n.e(8932).then(n.bind(n,5194)),meta:{date:1758543589e3,excerpt:"\n<p>小朋友们，你们有没有整理过自己的玩具柜？把积木按颜色分类，把拼图按大小排列，或者把绘本按顺序放在书架上。在计算机中，我们也经常需要整理数据，比如按成绩高低排列学生名单，按价格排序商品列表等。这时候，排序算法就派上用场了！</p>\n<h2>什么是排序算法？</h2>\n<p>排序算法就是一种让计算机按照一定的顺序（如从小到大、从大到小、按字母顺序等）排列数据的方法。就像你整理玩具的方法有很多种一样，计算机排序的方法也有很多种，每种方法都有自己的特点和适用场景。</p>\n<h2>常见的排序算法</h2>\n<h3>冒泡排序：像气泡一样往上冒</h3>\n<p>冒泡排序是一种简单的排序算法，它的工作原理就像气泡在水中往上冒一样：比较相邻的两个元素，如果它们的顺序错误就交换它们，直到没有再需要交换的元素为止。</p>",readingTime:{minutes:9.06,words:2717},title:"排序算法：让计算机帮你整理东西",type:"article"}}],["/programming-languages/c/16-searching-algorithms.html",{loader:()=>n.e(1327).then(n.bind(n,972)),meta:{date:1758543589e3,excerpt:"\n<p>小朋友们，你们有没有在玩具堆里找过自己最喜欢的那个玩具？或者在书架上找过一本特定的书？在计算机中，我们也经常需要从大量的数据中找出我们需要的那部分数据。这时候，查找算法就派上用场了！</p>\n<h2>什么是查找算法？</h2>\n<p>查找算法就是一种让计算机从大量的数据中找到特定数据的方法。就像你找东西的方法有很多种一样，计算机查找的方法也有很多种，每种方法都有自己的特点和适用场景。</p>\n<h2>常见的查找算法</h2>\n<h3>线性查找：一个一个找</h3>\n<p>线性查找，也叫顺序查找，是最简单的查找算法。它的工作原理是：从数据的一端开始，一个一个地检查每个元素，直到找到目标元素或者检查完所有元素。</p>",readingTime:{minutes:9.82,words:2947},title:"查找算法：让计算机帮你找东西",type:"article"}}],["/programming-languages/c/",{loader:()=>n.e(6936).then(n.bind(n,5503)),meta:{date:1758543559e3,excerpt:'\n<p>你好呀！欢迎来到C语言的奇妙世界！C语言就像是一种和计算机对话的特殊语言，由一位叫丹尼斯·里奇的叔叔在1970年代发明。它可厉害了，现在我们用的很多编程语言（像C++、Java、Python）都是从C语言这里学的本事呢！</p>\n<h2>为什么说C语言很特别？</h2>\n<p>想象一下，C语言就像是一个既能和计算机"亲密交流"又能让人类容易理解的翻译官：</p>\n<ul>\n<li><strong>跑得飞快</strong>：C语言能直接告诉计算机怎么使用内存，所以程序运行得特别快</li>\n<li><strong>到处都能用</strong>：用C语言写的程序，能在不同的电脑上运行（就像你的玩具能在客厅也能在卧室玩一样）</li>\n<li><strong>功能超丰富</strong>：C语言有很多"小工具"（运算符和数据类型），能帮你做各种各样的事情</li>\n<li><strong>简单又灵活</strong>：C语言的语法就像简单的积木，可以搭出千变万化的形状</li>\n</ul>',readingTime:{minutes:3.16,words:947},title:"C语言入门：和计算机交朋友的神奇语言",type:"article"}}],["/programming-languages/common-concepts/01-procedural-programming.html",{loader:()=>n.e(8949).then(n.bind(n,2724)),meta:{date:1758547865e3,excerpt:"\n<p>面向过程编程（Procedural Programming）是一种重要的编程范式，它强调程序的执行过程，将问题分解为一系列的步骤，通过函数的调用和执行来解决问题。在这篇文章中，我们将介绍面向过程编程的基本概念、特点和应用场景。</p>\n<h2>一、什么是面向过程编程？</h2>\n<p>面向过程编程是一种以过程为中心的编程思想，它将程序视为一系列执行步骤的集合。在面向过程编程中，我们关注的是<strong>如何完成任务</strong>，而不是<strong>谁来完成任务</strong>。</p>\n<p>面向过程编程的核心是函数（也称为过程或子程序），这些函数包含了完成特定任务的代码。程序的执行就是按照一定的顺序调用这些函数，每个函数完成自己的任务后将控制权返回给调用者。</p>",readingTime:{minutes:6.82,words:2046},title:"面向过程编程基础",type:"article"}}],["/programming-languages/common-concepts/02-object-oriented-programming.html",{loader:()=>n.e(6643).then(n.bind(n,5987)),meta:{date:1758547865e3,excerpt:"\n<p>面向对象编程（Object-Oriented Programming，OOP）是一种重要的编程范式，它将现实世界中的事物抽象为程序中的对象，通过对象之间的交互来解决问题。在这篇文章中，我们将介绍面向对象编程的基本概念、核心原则和应用场景。</p>\n<h2>一、什么是面向对象编程？</h2>\n<p>面向对象编程是一种以对象为中心的编程思想，它将数据（属性）和操作数据的方法（函数）封装在一个对象中，使对象成为程序的基本构建块。在面向对象编程中，我们关注的是<strong>谁来完成任务</strong>，而不仅仅是<strong>如何完成任务</strong>。</p>\n<p>面向对象编程的核心是对象，对象是对现实世界中事物的抽象，它具有：</p>",readingTime:{minutes:9.79,words:2937},title:"面向对象编程基础",type:"article"}}],["/programming-languages/common-concepts/03-functions-basics.html",{loader:()=>n.e(6923).then(n.bind(n,88)),meta:{date:1758547865e3,excerpt:"\n<p>函数是编程中最基本、最重要的概念之一，它是一段具有特定功能的代码块，可以接受输入参数，执行特定的操作，并返回结果。在这篇文章中，我们将介绍函数的基本概念、特点、类型和应用场景。</p>\n<h2>一、什么是函数？</h2>\n<p>函数是一种封装了特定功能的代码块，它可以被多次调用和复用。函数的主要作用是将复杂的问题分解为多个简单的子问题，每个子问题对应一个函数，从而提高代码的可读性、可维护性和可复用性。</p>\n<p>在编程中，函数通常包括以下几个部分：</p>\n<ul>\n<li><strong>函数名</strong>：用于标识函数的名称</li>\n<li><strong>参数列表</strong>：函数接受的输入值</li>\n<li><strong>函数体</strong>：包含实现特定功能的代码</li>\n<li><strong>返回值</strong>：函数执行后返回的结果</li>\n</ul>",readingTime:{minutes:9.07,words:2722},title:"函数基础概念",type:"article"}}],["/programming-languages/common-concepts/04-data-structures-basics.html",{loader:()=>n.e(5320).then(n.bind(n,4195)),meta:{date:1758547865e3,excerpt:"\n<p>数据结构是计算机中组织和存储数据的方式，它是计算机科学的基础，也是高效算法设计的关键。在这篇文章中，我们将介绍数据结构的基本概念、常见类型和应用场景。</p>\n<h2>一、什么是数据结构？</h2>\n<p>数据结构是指相互之间存在一种或多种特定关系的数据元素的集合，它包括以下三个方面：</p>\n<ul>\n<li><strong>逻辑结构</strong>：数据元素之间的逻辑关系</li>\n<li><strong>物理结构</strong>：数据元素在计算机中的存储方式</li>\n<li><strong>数据的运算</strong>：对数据元素可以执行的操作</li>\n</ul>\n<p>数据结构的选择直接影响算法的效率，不同的问题需要选择不同的数据结构来解决。</p>",readingTime:{minutes:15.41,words:4622},title:"数据结构基础概念",type:"article"}}],["/programming-languages/common-concepts/05-algorithms-basics.html",{loader:()=>n.e(6174).then(n.bind(n,4435)),meta:{date:1758547865e3,excerpt:"\n<p>算法是解决问题的步骤集合，是计算机科学的核心概念之一。在这篇文章中，我们将介绍算法的基本概念、特性、复杂度分析和常见的算法类型。</p>\n<h2>一、什么是算法？</h2>\n<p>算法是解决特定问题的一系列明确、可执行的步骤，它具有以下特点：</p>\n<ul>\n<li><strong>有限性</strong>：算法必须在有限步骤内结束</li>\n<li><strong>确定性</strong>：每个步骤都有明确的定义，不会产生歧义</li>\n<li><strong>输入</strong>：算法可以有零个或多个输入</li>\n<li><strong>输出</strong>：算法至少有一个输出</li>\n<li><strong>可行性</strong>：算法的每一步都可以通过已有的基本操作实现</li>\n</ul>",readingTime:{minutes:7.57,words:2270},title:"算法基础概念",type:"article"}}],["/programming-languages/common-concepts/",{loader:()=>n.e(8880).then(n.bind(n,6825)),meta:{date:1758543646e3,excerpt:'\n<p>本目录包含适用于多种编程语言的基础概念和原理知识。这些概念是理解计算机科学和编程的基础知识，无论你学习哪种编程语言，这些知识都会对你有所帮助。</p>\n<h2>目录内容</h2>\n<ul>\n<li><a href="/GahooChenBlog/programming-languages/common-concepts/01-procedural-programming.html" target="_blank">面向过程编程基础</a>：介绍面向过程编程的基本概念、特点和应用场景</li>\n<li><a href="/GahooChenBlog/programming-languages/common-concepts/02-object-oriented-programming.html" target="_blank">面向对象编程基础</a>：介绍面向对象编程的核心原则、概念和设计方法</li>\n<li><a href="/GahooChenBlog/programming-languages/common-concepts/03-functions-basics.html" target="_blank">函数基础概念</a>：深入了解函数的定义、类型、参数传递和设计原则</li>\n<li><a href="/GahooChenBlog/programming-languages/common-concepts/04-data-structures-basics.html" target="_blank">数据结构基础概念</a>：介绍数据结构的基本概念、常见类型和应用场景</li>\n<li><a href="/GahooChenBlog/programming-languages/common-concepts/05-algorithms-basics.html" target="_blank">算法基础概念</a>：介绍算法的基本概念、复杂度分析和常见算法类型</li>\n</ul>',readingTime:{minutes:1.21,words:363},title:"通用编程语言概念",type:"article"}}],["/programming-languages/cpp/01-getting-started.html",{loader:()=>n.e(904).then(n.bind(n,3110)),meta:{date:1758543646e3,excerpt:'\n<p>你好呀！欢迎来到C++的第一节课。在这节课中，我们将一起认识C++的基本结构，了解如何编写和编译你的第一个C++程序，以及C++与C语言的一些初步区别。</p>\n<h2>C++是什么？</h2>\n<p>C++是一种强大的编程语言，它是在C语言的基础上发展而来的。如果说C语言是和计算机交朋友的基础语言，那么C++就像是让你和计算机成为更好朋友的进阶语言！</p>\n<p>C++由本贾尼·斯特劳斯特卢普在1983年创建，最初被称为"带类的C"。随着时间的推移，它逐渐发展成为一种功能强大、应用广泛的编程语言。</p>\n<h2>你的第一个C++程序</h2>\n<p>让我们来编写你的第一个C++程序吧！这个程序会在屏幕上显示"Hello, C++ World!"。</p>',readingTime:{minutes:3.08,words:925},title:"C++入门：开启编程新旅程",type:"article"}}],["/programming-languages/cpp/02-enhanced-data-types.html",{loader:()=>n.e(7132).then(n.bind(n,9305)),meta:{date:1758543646e3,excerpt:"\n<p>在上一节课中，我们学习了C++的基本结构和编译方式。在这节课中，我们将深入了解C++在数据类型方面的增强特性，看看C++是如何扩展和改进C语言的数据类型系统的。</p>\n<h2>C++中的基本数据类型</h2>\n<p>C++保留了C语言的所有基本数据类型：</p>\n<ul>\n<li>整型：<code>int</code>、<code>short</code>、<code>long</code>、<code>long long</code></li>\n<li>浮点型：<code>float</code>、<code>double</code>、<code>long double</code></li>\n<li>字符型：<code>char</code></li>\n<li>布尔型：C语言中的<code>_Bool</code>（在C99标准中引入）</li>\n</ul>",readingTime:{minutes:4.04,words:1211},title:"C++数据类型增强：更丰富的数据表达",type:"article"}}],["/programming-languages/cpp/03-io-operations.html",{loader:()=>n.e(8855).then(n.bind(n,1031)),meta:{date:1758543646e3,excerpt:"\n<p>在上一节课中，我们学习了C++的数据类型增强特性。在这节课中，我们将深入了解C++特有的输入输出系统，看看C++是如何让程序与用户进行交互的。</p>\n<h2>C++的I/O流</h2>\n<p>C++使用流（stream）的概念来处理输入输出。流是一种抽象，它代表了数据的流动。C++的I/O系统包含在<code>iostream</code>库中，主要提供了以下对象：</p>\n<ul>\n<li><code>std::cout</code>：标准输出流，用于将数据输出到屏幕</li>\n<li><code>std::cin</code>：标准输入流，用于从键盘读取数据</li>\n<li><code>std::cerr</code>：标准错误流，用于输出错误信息</li>\n<li><code>std::clog</code>：标准日志流，用于输出日志信息</li>\n</ul>",readingTime:{minutes:4.45,words:1336},title:"C++的输入输出：与程序对话的桥梁",type:"article"}}],["/programming-languages/cpp/04-enhanced-functions.html",{loader:()=>n.e(3205).then(n.bind(n,3985)),meta:{date:1758543646e3,excerpt:'\n<p>在上一节课中，我们学习了C++特有的输入输出系统。在这节课中，我们将深入了解C++在函数方面的增强特性，看看C++是如何扩展和改进C语言的函数功能的。</p>\n<h2>C++中函数的基本概念</h2>\n<p>C++保留了C语言的函数基本概念和语法，但增加了许多新的特性和功能。让我们先来回顾一下C语言中函数的基本结构：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// C语言中的函数定义</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">return_type </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">function_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">parameter_list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 函数体</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> return_value;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.79,words:1436},title:"函数的增强：C++中的高级函数特性",type:"article"}}],["/programming-languages/cpp/05-classes-objects.html",{loader:()=>n.e(7245).then(n.bind(n,5901)),meta:{date:1758543646e3,excerpt:'\n<p>在上一节课中，我们学习了C++在函数方面的增强特性。在这节课中，我们将开始学习C++最重要的特性——面向对象编程（OOP），特别是类和对象的基本概念和使用方法。</p>\n<h2>什么是面向对象编程？</h2>\n<p>面向对象编程（Object-Oriented Programming，简称OOP）是一种编程范式，它使用"对象"来设计应用程序和计算机程序。面向对象编程的主要特点包括：</p>\n<ul>\n<li><strong>封装</strong>：将数据和方法封装在一个单元（类）中</li>\n<li><strong>继承</strong>：允许创建新类，继承现有类的属性和方法</li>\n<li><strong>多态</strong>：允许不同的对象对同一消息作出不同的响应</li>\n<li><strong>抽象</strong>：关注对象的本质特征，忽略非本质细节</li>\n</ul>',readingTime:{minutes:4.33,words:1298},title:"类与对象基础：C++面向对象编程的起点",type:"article"}}],["/programming-languages/cpp/06-constructors-destructors.html",{loader:()=>n.e(1161).then(n.bind(n,9892)),meta:{date:1758543646e3,excerpt:"\n<p>在上一节课中，我们学习了C++类和对象的基本概念。在这节课中，我们将深入了解类的两个特殊成员函数：构造函数和析构函数，它们负责对象的创建和销毁过程。</p>\n<h2>构造函数</h2>\n<p>构造函数是一种特殊的成员函数，当创建类的对象时，它会自动被调用。构造函数的主要作用是初始化对象的成员变量。</p>\n<h3>构造函数的特点</h3>\n<ul>\n<li>构造函数的名称与类名相同</li>\n<li>构造函数没有返回类型</li>\n<li>构造函数可以被重载</li>\n<li>创建对象时自动调用</li>\n</ul>\n<h3>默认构造函数</h3>\n<p>如果一个类没有定义任何构造函数，编译器会自动生成一个默认构造函数。默认构造函数没有参数，不做任何操作。</p>",readingTime:{minutes:5.53,words:1659},title:"构造函数与析构函数：对象的生命周期管理",type:"article"}}],["/programming-languages/cpp/07-inheritance-polymorphism.html",{loader:()=>n.e(6544).then(n.bind(n,8213)),meta:{date:1758543646e3,excerpt:'\n<p>在前面的课程中，我们学习了C++类的基本概念、构造函数和析构函数。在这节课中，我们将探讨C++面向对象编程的两个核心概念：继承与多态。</p>\n<h2>继承</h2>\n<p>继承是一种创建新类的方式，新类可以继承现有类的属性和方法，同时可以添加自己的属性和方法。通过继承，我们可以实现代码的重用和扩展。</p>\n<h3>继承的基本语法</h3>\n<p>在C++中，继承的基本语法如下：</p>\n<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> DerivedClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> : access-specifier BaseClass {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 派生类的成员</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:5.58,words:1673},title:"继承与多态：面向对象编程的精髓",type:"article"}}],["/programming-languages/cpp/08-operator-overloading.html",{loader:()=>n.e(4320).then(n.bind(n,7576)),meta:{date:1758543646e3,excerpt:'\n<p>在之前的课程中，我们学习了C++的继承与多态特性。在这节课中，我们将探讨C++的另一个强大特性——运算符重载，它允许我们为自定义类型定义标准运算符的行为。</p>\n<h2>运算符重载的基本概念</h2>\n<p>运算符重载是C++的一项特性，它允许我们为自定义类型（如类）重新定义或重载大多数C++运算符。通过运算符重载，我们可以使对象像基本类型一样使用运算符进行操作。</p>\n<h3>运算符重载的语法</h3>\n<p>运算符重载的语法如下：</p>\n<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">返回类型 operator运算符(参数列表) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 运算符实现</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:7.63,words:2288},title:"运算符重载：让对象支持运算符操作",type:"article"}}],["/programming-languages/cpp/09-templates.html",{loader:()=>n.e(9531).then(n.bind(n,9063)),meta:{date:1758543646e3,excerpt:"\n<p>在前面的课程中，我们学习了C++的运算符重载特性。在这节课中，我们将探讨C++的模板编程，这是实现泛型编程的基础。</p>\n<h2>模板的基本概念</h2>\n<p>模板是C++的一种特性，它允许我们定义通用的函数或类，这些函数或类可以处理不同类型的数据。通过模板，我们可以编写与类型无关的代码，提高代码的重用性和灵活性。</p>\n<p>C++模板主要分为两类：</p>\n<ul>\n<li>函数模板</li>\n<li>类模板</li>\n</ul>\n<h2>函数模板</h2>\n<p>函数模板允许我们定义一个通用的函数，可以处理不同类型的参数。函数模板的定义使用关键字<code>template</code>和模板参数列表。</p>",readingTime:{minutes:7.26,words:2179},title:"模板编程：泛型编程的基础",type:"article"}}],["/programming-languages/cpp/10-standard-library-containers.html",{loader:()=>n.e(2144).then(n.bind(n,4397)),meta:{date:1758543646e3,excerpt:"\n<p>在前面的课程中，我们学习了C++的模板编程特性。在这节课中，我们将探讨C++标准库中的容器，这些是预先实现好的、高效的数据结构，可以直接在我们的程序中使用。</p>\n<h2>容器概览</h2>\n<p>C++标准库提供了各种类型的容器，用于存储和管理不同类型的数据。这些容器可以分为以下几类：</p>\n<ol>\n<li>序列容器（Sequence Containers）：按顺序存储元素</li>\n<li>关联容器（Associative Containers）：按键存储元素，提供快速查找</li>\n<li>无序关联容器（Unordered Associative Containers）：基于哈希表实现，提供平均常数时间的查找</li>\n<li>容器适配器（Container Adapters）：基于其他容器实现的特殊接口</li>\n</ol>",readingTime:{minutes:9.8,words:2940},title:"C++标准库容器：高效数据结构的集合",type:"article"}}],["/programming-languages/cpp/11-standard-library-algorithms.html",{loader:()=>n.e(161).then(n.bind(n,4523)),meta:{date:1758543646e3,excerpt:"\n<p>上一节课我们学习了C++标准库中的容器，这节课我们将探讨C++标准库中的算法。这些算法是一组通用函数，可以用于操作各种容器中的元素，使我们能够以简洁、高效的方式实现常见的数据处理任务。</p>\n<h2>算法概览</h2>\n<p>C++标准库算法主要定义在<code>&lt;algorithm&gt;</code>头文件中，这些算法可以分为以下几类：</p>\n<ol>\n<li>非修改性序列操作（Non-modifying sequence operations）</li>\n<li>修改性序列操作（Modifying sequence operations）</li>\n<li>排序和相关操作（Sorting and related operations）</li>\n<li>数值算法（Numerical algorithms）</li>\n</ol>",readingTime:{minutes:9.55,words:2865},title:"C++标准库算法：强大的通用函数集合",type:"article"}}],["/programming-languages/cpp/12-exception-handling.html",{loader:()=>n.e(3111).then(n.bind(n,1741)),meta:{date:1758543646e3,excerpt:"\n<p>在前面的课程中，我们学习了C++标准库中的算法。在这节课中，我们将探讨C++的异常处理机制，这是C++提供的一种处理运行时错误的结构化方式，可以使我们的程序更加健壮和可靠。</p>\n<h2>异常处理概述</h2>\n<p>在C语言中，我们通常使用错误码来表示函数执行的结果，然后在调用函数后检查这些错误码。这种方式有一些缺点：</p>\n<ol>\n<li>错误处理代码与正常逻辑代码混合在一起，使代码变得复杂和难以阅读</li>\n<li>容易忘记检查错误码</li>\n<li>无法在深层次嵌套的函数调用中方便地传递错误信息</li>\n</ol>\n<p>C++的异常处理机制提供了一种更加结构化和灵活的方式来处理错误。异常处理主要包含三个关键字：<code>try</code>、<code>catch</code>和<code>throw</code>。</p>",readingTime:{minutes:9.16,words:2747},title:"C++异常处理：优雅地应对错误",type:"article"}}],["/programming-languages/cpp/13-raii-resource-management.html",{loader:()=>n.e(4985).then(n.bind(n,5734)),meta:{date:1758543646e3,excerpt:"\n<p>上一节课我们学习了C++的异常处理机制。在这节课中，我们将探讨C++的RAII（Resource Acquisition Is Initialization）机制，这是一种与异常处理密切相关的资源管理技术，被广泛认为是C++中最重要的编程范式之一。</p>\n<h2>RAII机制概述</h2>\n<p>RAII是一种编程范式，它确保在获取资源的同时初始化一个对象，并且在对象的生命周期结束时（即对象被销毁时）自动释放资源。RAII机制的核心思想是：<strong>将资源的获取和释放与对象的生命周期绑定在一起</strong>。</p>\n<p>在C++中，对象的生命周期是由其作用域决定的。当对象离开其作用域时，它的析构函数会被自动调用。我们可以利用这一特性，在对象的构造函数中获取资源，在析构函数中释放资源，从而确保资源的安全管理。</p>",readingTime:{minutes:10.9,words:3269},title:"C++ RAII机制：资源获取即初始化",type:"article"}}],["/programming-languages/cpp/14-namespaces.html",{loader:()=>n.e(9060).then(n.bind(n,3674)),meta:{date:1758543646e3,excerpt:"\n<p>上一节课我们学习了C++的RAII机制，这是一种重要的资源管理技术。在这节课中，我们将探讨C++的命名空间（Namespaces）机制，这是一种用于组织代码、避免命名冲突的有效工具。</p>\n<h2>命名空间的概念</h2>\n<p>命名空间是C++中一种用于组织代码的机制，它可以将相关的代码组织在一起，并防止不同代码库之间的命名冲突。在C++中，我们可以将类、函数、变量等声明和定义放在命名空间中，从而形成一个逻辑上的代码分组。</p>\n<p>命名空间的主要作用包括：</p>\n<ol>\n<li>避免命名冲突：不同库或不同模块中可能有相同名称的函数、类或变量，使用命名空间可以区分它们</li>\n<li>组织代码：将相关的代码组织在同一个命名空间中，使代码结构更加清晰</li>\n<li>控制访问：可以限制命名空间中内容的可见性</li>\n</ol>",readingTime:{minutes:7.21,words:2164},title:"C++命名空间：避免命名冲突的有效机制",type:"article"}}],["/programming-languages/cpp/15-stl-algorithms.html",{loader:()=>n.e(8219).then(n.bind(n,9314)),meta:{date:1758543646e3,excerpt:"\n<p>上一节课我们学习了C++的命名空间机制，这是一种用于组织代码的有效工具。在这节课中，我们将探讨C++ STL（Standard Template Library）中的算法库，这是一套强大的泛型算法工具，可以大大提高我们的编程效率。</p>\n<h2>STL算法库概述</h2>\n<p>STL算法库是C++标准库中的一个重要组成部分，它提供了大量的泛型算法，可以用于各种容器和数据结构。这些算法大多定义在<code>&lt;algorithm&gt;</code>头文件中，有些数值算法定义在<code>&lt;numeric&gt;</code>头文件中。</p>\n<p>STL算法库的主要特点包括：</p>",readingTime:{minutes:10.85,words:3256},title:"C++ STL算法库：强大的泛型算法工具",type:"article"}}],["/programming-languages/cpp/16-memory-model.html",{loader:()=>n.e(9921).then(n.bind(n,4465)),meta:{date:1758543646e3,excerpt:"\n<p>上一节课我们学习了C++ STL算法库，这是一套强大的泛型算法工具。在这节课中，我们将探讨C++的内存模型和内存管理机制，这是理解C++程序性能和行为的关键。</p>\n<h2>内存模型概述</h2>\n<p>C++内存模型定义了程序中变量的存储方式、生命周期以及如何访问这些变量。理解C++的内存模型对于编写高效、可靠的程序至关重要。</p>\n<p>C++程序的内存空间通常分为以下几个区域：</p>\n<ol>\n<li><strong>代码区（Text Segment）</strong>：存储程序的可执行指令</li>\n<li><strong>全局/静态存储区（Data Segment）</strong>：存储全局变量和静态变量</li>\n<li><strong>常量存储区（Const Data Segment）</strong>：存储常量</li>\n<li><strong>堆区（Heap）</strong>：动态分配的内存，由程序员管理</li>\n<li><strong>栈区（Stack）</strong>：存储函数调用的返回地址、参数、局部变量等</li>\n</ol>",readingTime:{minutes:12.22,words:3665},title:"C++内存模型与内存管理：深入理解程序的内存行为",type:"article"}}],["/programming-languages/cpp/17-multithreading.html",{loader:()=>n.e(2292).then(n.bind(n,668)),meta:{date:1758543646e3,excerpt:"\n<p>上一节课我们学习了C++的内存模型和内存管理机制，这是理解C++程序性能和行为的关键。在这节课中，我们将探讨C++的多线程编程，这是现代C++程序开发中的一个重要主题。</p>\n<h2>多线程编程概述</h2>\n<p>多线程编程是指在一个程序中同时执行多个线程，每个线程可以独立运行不同的代码。多线程编程的主要目的是提高程序的性能和响应性，特别是在多核处理器上，可以充分利用硬件资源。</p>\n<p>在C++11之前，C++标准库中没有提供多线程编程的支持，程序员需要使用平台特定的API（如Windows的Win32 API或POSIX的pthread库）来进行多线程编程。C++11引入了标准的多线程库，使多线程编程变得更加简单和可移植。</p>",readingTime:{minutes:13.98,words:4195},title:"C++多线程编程：并发与同步技术",type:"article"}}],["/programming-languages/cpp/18-move-semantics.html",{loader:()=>n.e(6085).then(n.bind(n,9360)),meta:{date:1758543646e3,excerpt:"\n<p>上一节课我们学习了C++的多线程编程，掌握了如何在C++中创建和管理线程，以及如何确保线程安全。在这节课中，我们将探讨C++11引入的重要特性——移动语义和右值引用，这是C++性能优化的重要工具。</p>\n<h2>值类别与右值引用</h2>\n<p>在介绍移动语义之前，我们需要了解C++中的值类别（value categories）。C++11将表达式的值类别分为以下几种：</p>\n<ol>\n<li><strong>左值（lvalue）</strong>：表达式结束后依然存在的持久对象</li>\n<li><strong>右值（rvalue）</strong>：表达式结束后就不再存在的临时对象</li>\n<li><strong>将亡值（xvalue）</strong>：即将被移动的对象，属于右值的一种</li>\n<li><strong>纯右值（prvalue）</strong>：临时对象或不关联对象的值</li>\n</ol>",readingTime:{minutes:11.97,words:3590},title:"C++移动语义与右值引用：提升程序性能",type:"article"}}],["/programming-languages/cpp/19-smart-pointers.html",{loader:()=>n.e(3779).then(n.bind(n,6646)),meta:{date:1758543646e3,excerpt:"\n<p>上一节课我们学习了C++的移动语义和右值引用，这些特性可以显著提高程序的性能。在这节课中，我们将探讨C++11引入的智能指针，这是C++自动内存管理的重要工具，也是RAII（Resource Acquisition Is Initialization）机制的具体实现。</p>\n<h2>内存管理问题</h2>\n<p>在C++中，手动管理内存是一个常见的挑战。如果不小心，很容易导致以下问题：</p>\n<ol>\n<li><strong>内存泄漏</strong>：忘记释放不再使用的内存</li>\n<li><strong>悬挂指针</strong>：指针指向已经释放的内存</li>\n<li><strong>重复释放</strong>：同一块内存被释放多次</li>\n<li><strong>内存分配失败</strong>：没有检查内存分配是否成功</li>\n</ol>",readingTime:{minutes:12.3,words:3691},title:"C++智能指针：自动内存管理",type:"article"}}],["/programming-languages/cpp/20-modern-cpp-features.html",{loader:()=>n.e(1604).then(n.bind(n,4671)),meta:{date:1758543646e3,excerpt:'\n<p>上一节课我们学习了C++的智能指针，这是C++自动内存管理的重要工具。在这最后一节课中，我们将探讨C++11及以后版本引入的现代特性，这些特性使C++编程变得更加高效、安全和便捷。</p>\n<h2>C++标准版本概述</h2>\n<p>在开始介绍现代C++特性之前，让我们先了解一下C++标准的发展历程：</p>\n<ul>\n<li><strong>C++98/C++03</strong>：第一个C++标准版本</li>\n<li><strong>C++11</strong>：重大更新，引入了大量现代特性，也被称为"C++0x"</li>\n<li><strong>C++14</strong>：对C++11的增量更新，完善和扩展了C++11的特性</li>\n<li><strong>C++17</strong>：进一步的改进和新特性</li>\n<li><strong>C++20</strong>：引入了许多重大特性，如概念、范围库等</li>\n<li><strong>C++23</strong>：最新的标准版本（正在制定中）</li>\n</ul>',readingTime:{minutes:20.61,words:6182},title:"C++现代特性：C++11/14/17/20新功能",type:"article"}}],["/programming-languages/cpp/",{loader:()=>n.e(1208).then(n.bind(n,4058)),meta:{date:1758543559e3,excerpt:"\n<p>你好呀！欢迎来到C++的精彩世界！C++是在C语言基础上发展起来的高级编程语言，由本贾尼·斯特劳斯特卢普在1983年创建。如果说C语言是和计算机交朋友的基础语言，那么C++就是带计算机认识更广阔世界的进阶语言！</p>\n<h2>为什么说C++很特别？</h2>\n<p>C++就像是C语言的升级版，它保留了C语言的高效和灵活，同时又添加了许多强大的新特性：</p>\n<ul>\n<li><strong>面向对象编程</strong>：C++允许你像搭积木一样创建和使用类与对象，让代码更有条理</li>\n<li><strong>泛型编程</strong>：通过模板，你可以编写适用于多种数据类型的通用代码</li>\n<li><strong>丰富的标准库</strong>：C++提供了大量现成的工具和容器，让编程变得更简单</li>\n<li><strong>兼容C语言</strong>：几乎所有的C代码都可以在C++中直接使用</li>\n<li><strong>更安全的编程</strong>：C++增加了许多安全机制，帮助你避免常见的编程错误</li>\n</ul>",readingTime:{minutes:3.42,words:1025},title:"C++语言进阶：从C到C++的华丽转身",type:"article"}}],["/programming-languages/csharp/",{loader:()=>n.e(6448).then(n.bind(n,158)),meta:{date:1758543559e3,excerpt:'\n<p>C#（发音为"See Sharp"）是微软开发的一种现代、面向对象的编程语言，由安德斯·海尔斯伯格（Anders Hejlsberg）领导的团队设计。它结合了C++的强大功能和Visual Basic的易用性，特别适合Windows平台开发。</p>\n<h2>C#特点</h2>\n<ul>\n<li><strong>简单易学</strong>：语法清晰，减少了许多常见的编程错误</li>\n<li><strong>面向对象</strong>：全面支持面向对象编程概念</li>\n<li><strong>类型安全</strong>：强类型系统，减少运行时错误</li>\n<li><strong>跨平台</strong>：<a href="http://xn--863a9f.NET" target="_blank" rel="noopener noreferrer">通过.NET</a> Core可以在Windows、macOS和Linux上运行</li>\n<li><strong>丰富的类库</strong>：提供了大量现成的功能和API</li>\n</ul>',readingTime:{minutes:1.37,words:410},title:"C#基础学习",type:"article"}}],["/programming-languages/java/",{loader:()=>n.e(4567).then(n.bind(n,7003)),meta:{date:1758543559e3,excerpt:'\n<p>Java是一种广泛使用的计算机编程语言，由詹姆斯·高斯林（James Gosling）领导的Sun Microsystems团队于1995年开发。Java以其"一次编写，到处运行"（Write Once, Run Anywhere）的跨平台特性而闻名。</p>\n<h2>Java特点</h2>\n<ul>\n<li><strong>跨平台性</strong>：Java程序可以在任何带有JVM（Java虚拟机）的平台上运行</li>\n<li><strong>面向对象</strong>：Java是一种纯面向对象的编程语言</li>\n<li><strong>安全性</strong>：内置了安全管理器，提供安全API</li>\n<li><strong>健壮性</strong>：强类型检查、自动内存管理（垃圾回收）等特性</li>\n<li><strong>多线程支持</strong>：内置多线程处理机制</li>\n</ul>',readingTime:{minutes:1.38,words:415},title:"Java基础学习",type:"article"}}],["/programming-languages/math-calculations/01-number-systems-bitwise-principles.html",{loader:()=>n.e(7092).then(n.bind(n,5034)),meta:{date:1758543646e3,excerpt:"\n<p>小朋友们，你们知道吗？我们平时用的数字（0-9）其实只是表示数量的一种方式，在计算机世界里，还有很多其他的数字表示方法！今天我们就来探索数字的秘密语言！</p>\n<h2>一、什么是进制？</h2>\n<p>进制就是表示数字的进位方式。我们最熟悉的是十进制（满10进1），但在计算机中，二进制（满2进1）才是主角！</p>\n<h3>1.1 常见的进制</h3>\n<ul>\n<li><strong>十进制（Decimal）</strong>：我们日常生活中使用的进制，有0-9十个数字，满10进1</li>\n<li><strong>二进制（Binary）</strong>：计算机内部使用的进制，只有0和1两个数字，满2进1</li>\n<li><strong>八进制（Octal）</strong>：有0-7八个数字，满8进1</li>\n<li><strong>十六进制（Hexadecimal）</strong>：有0-9和A-F十六个数字，满16进1</li>\n</ul>",readingTime:{minutes:4.56,words:1367},title:"进制转换与位运算原理",type:"article"}}],["/programming-languages/math-calculations/02-vector-operations.html",{loader:()=>n.e(9304).then(n.bind(n,3801)),meta:{date:1758547865e3,excerpt:"\n<p>向量是数学和计算机科学中一个非常重要的概念，它在图形学、物理学模拟、机器学习等领域都有广泛的应用。今天我们就来学习向量的基本概念和运算规则！</p>\n<h2>一、什么是向量？</h2>\n<p>向量是一个既有大小又有方向的量。在几何中，我们可以用有向线段来表示向量，线段的长度表示向量的大小，线段的方向表示向量的方向。</p>\n<p>在计算机科学中，向量通常用一组有序的数字来表示，这些数字称为向量的分量或坐标。</p>\n<p>例如，在二维空间中，向量可以表示为 <code>(x, y)</code>；在三维空间中，可以表示为 <code>(x, y, z)</code>。</p>\n<h2>二、向量的表示方法</h2>",readingTime:{minutes:6.09,words:1827},title:"向量运算",type:"article"}}],["/programming-languages/math-calculations/03-matrix-operations.html",{loader:()=>n.e(3690).then(n.bind(n,7024)),meta:{date:1758547865e3,excerpt:"\n<p>矩阵是数学中的一个重要概念，它在计算机图形学、物理学、统计学、机器学习等领域都有广泛的应用。今天我们就来学习矩阵的基本概念和运算规则！</p>\n<h2>一、什么是矩阵？</h2>\n<p>矩阵是一个由数字排列成的矩形阵列，这些数字称为矩阵的元素。矩阵通常用大写字母表示，例如 <code>A</code>、<code>B</code>、<code>C</code> 等。</p>\n<p>矩阵的大小由它的行数和列数决定。一个 <code>m×n</code> 的矩阵有 <code>m</code> 行和 <code>n</code> 列。例如，下面是一个 <code>3×2</code> 的矩阵：</p>",readingTime:{minutes:8.42,words:2527},title:"矩阵运算",type:"article"}}],["/programming-languages/math-calculations/",{loader:()=>n.e(146).then(n.bind(n,2888)),meta:{date:1758547865e3,excerpt:'\n<p>本模块包含与数学计算相关的知识和应用，涵盖了从基础数学概念到高级算法的内容。这些知识对于理解计算机科学中的算法原理和解决实际问题非常有帮助。</p>\n<h2>目录内容</h2>\n<ul>\n<li><a href="/GahooChenBlog/programming-languages/math-calculations/01-number-systems-bitwise-principles.html" target="_blank">进制转换与位运算原理</a>：学习不同进制的表示方法、转换规则以及位运算的数学原理和应用</li>\n<li><a href="/GahooChenBlog/programming-languages/math-calculations/02-vector-operations.html" target="_blank">向量运算</a>：介绍向量的基本概念、运算规则及其在计算机科学中的应用</li>\n<li><a href="/GahooChenBlog/programming-languages/math-calculations/03-matrix-operations.html" target="_blank">矩阵运算</a>：介绍矩阵的基本概念、运算规则及其在计算机科学中的应用</li>\n</ul>',readingTime:{minutes:1.03,words:309},title:"数学计算",type:"article"}}],["/programming-languages/programming-tools/01-cmake-basics.html",{loader:()=>n.e(7685).then(n.bind(n,9267)),meta:{date:1758547865e3,excerpt:"\n<p>CMake是一个跨平台的构建系统生成器，它可以使用简单的平台无关的配置文件来控制软件的编译过程，并生成可在多种编译器环境中使用的构建文件。CMake支持多种编程语言，尤其在C/C++项目中应用广泛。</p>\n<h2>一、CMake概述</h2>\n<h3>1.1 什么是CMake？</h3>\n<p>CMake是一个开源的、跨平台的构建系统生成器工具，它不直接构建软件，而是生成标准的构建文件（如Unix的Makefile、Windows的Visual Studio项目文件等），然后用户可以使用各自平台上的构建工具来编译代码。</p>\n<h3>1.2 CMake的特点</h3>\n<ul>\n<li><strong>跨平台</strong>：支持Windows、Linux、macOS等多种操作系统</li>\n<li><strong>生成多种构建系统</strong>：可生成Makefiles、Visual Studio项目、Xcode项目等</li>\n<li><strong>简单易学的语法</strong>：使用类似于脚本的CMakeLists.txt文件进行配置</li>\n<li><strong>良好的扩展性</strong>：支持模块化和第三方库的集成</li>\n<li><strong>大型项目支持</strong>：适合管理大型复杂的软件项目</li>\n</ul>",readingTime:{minutes:5.85,words:1756},title:"CMake基础教程",type:"article"}}],["/programming-languages/programming-tools/02-git-basics.html",{loader:()=>n.e(6155).then(n.bind(n,1892)),meta:{date:1758547865e3,excerpt:"\n<p>Git是一个开源的分布式版本控制系统，它可以有效地管理各种规模的项目代码。Git由Linus Torvalds在2005年为了管理Linux内核开发而创建，现已成为世界上最流行的版本控制系统之一。</p>\n<h2>一、Git概述</h2>\n<h3>1.1 什么是Git？</h3>\n<p>Git是一个分布式版本控制系统，它允许你跟踪文件的变化、协调多人之间的工作、恢复旧版本的文件，以及管理项目的不同分支。与集中式版本控制系统不同，Git不需要中央服务器来存储所有文件的历史记录，每个开发者都拥有完整的代码库副本。</p>\n<h3>1.2 Git的特点</h3>\n<ul>\n<li><strong>分布式</strong>：每个开发者都有完整的代码库副本，包括所有历史记录</li>\n<li><strong>高效</strong>：Git的设计注重性能，即使是大型项目也能快速操作</li>\n<li><strong>分支管理</strong>：Git的分支功能强大且轻量，便于实验和协作</li>\n<li><strong>完整性</strong>：Git使用SHA-1哈希算法确保数据的完整性和一致性</li>\n<li><strong>安全</strong>：Git具有多种机制来防止数据丢失和损坏</li>\n</ul>",readingTime:{minutes:8.2,words:2460},title:"Git基础教程",type:"article"}}],["/programming-languages/programming-tools/",{loader:()=>n.e(5538).then(n.bind(n,1866)),meta:{date:1758547865e3,excerpt:'\n<p>本模块介绍各种编程工具的使用方法和技巧，帮助你更高效地进行编程开发。无论你是初学者还是有经验的开发者，掌握这些工具都能提升你的编程效率和代码质量。</p>\n<h2>目录内容</h2>\n<ul>\n<li><a href="/GahooChenBlog/programming-languages/programming-tools/01-cmake-basics.html" target="_blank">CMake基础教程</a></li>\n<li><a href="/GahooChenBlog/programming-languages/programming-tools/02-git-basics.html" target="_blank">Git基础教程</a></li>\n</ul>',readingTime:{minutes:.82,words:246},title:"编程工具",type:"article"}}],["/programming-languages/python/01-first-program.html",{loader:()=>n.e(9524).then(n.bind(n,8688)),meta:{date:1758543678e3,excerpt:'\n<p>小朋友们，你们学说话的时候，是不是先学喊"爸爸妈妈"，然后才能说更多的话呢？学习Python也是一样的道理！这一节我们要学习如何编写你的第一个Python程序，就像在编程世界里说的第一句话。</p>\n<h2>你好，Python世界！</h2>\n<p>让我们先来看一个最简单的Python程序，就像你学写的第一个字一样：</p>\n<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"你好，世界！"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',readingTime:{minutes:3.2,words:959},title:"Python初体验：向世界问好",type:"article"}}],["/programming-languages/python/02-variables-data-types.html",{loader:()=>n.e(720).then(n.bind(n,7204)),meta:{date:1758543678e3,excerpt:'\n<p>小朋友们，你们玩过积木或者拼图吗？在Python的世界里，变量就像是我们的积木，而数据类型就像是不同形状和颜色的拼图块。通过组合它们，我们可以搭建出各种各样有趣的程序！</p>\n<h2>什么是变量？</h2>\n<p>变量就像是一个小盒子，我们可以把各种东西放进去，然后给这个盒子起一个名字。在Python中，创建变量非常简单，只需要给它赋值即可：</p>\n<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "小明"</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 8</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">height </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 130.5</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">likes_python </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> True</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.5,words:1050},title:"变量与数据类型：Python的积木和拼图",type:"article"}}],["/programming-languages/python/03-operators-expressions.html",{loader:()=>n.e(4138).then(n.bind(n,8393)),meta:{date:1758543678e3,excerpt:'\n<p>小朋友们，你们在数学课上学习过加减乘除这些运算符号吗？在Python的世界里，也有类似的运算符号，我们称之为"运算符"。通过使用这些运算符，我们可以让Python帮我们做各种计算！</p>\n<h2>什么是运算符和表达式？</h2>\n<p>运算符就是一些特殊的符号，用来表示各种运算，比如加法、减法等。而表达式则是由变量、常量和运算符组合而成的式子。</p>\n<p>例如：<code>2 + 3</code> 是一个表达式，其中 <code>+</code> 是加法运算符。</p>\n<h2>Python中的运算符</h2>\n<p>Python中有多种类型的运算符，让我们一起来认识它们：</p>',readingTime:{minutes:5.16,words:1547},title:"运算符与表达式：Python的计算工具",type:"article"}}],["/programming-languages/python/04-input-output.html",{loader:()=>n.e(6396).then(n.bind(n,6688)),meta:{date:1758543678e3,excerpt:'\n<p>小朋友们，你们有没有想过，如何让计算机和我们交流呢？在Python中，我们可以通过输入和输出来实现与计算机的对话。输入就像是我们对计算机说话，输出就像是计算机回答我们！</p>\n<h2>输出：让Python说话</h2>\n<p>我们已经学过使用<code>print()</code>函数让Python显示信息，这就是输出。让我们来复习一下，并学习一些新的技巧：</p>\n<h3>基本输出</h3>\n<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"你好，世界！"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Python真有趣！"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 输出变量的值</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "小明"</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 8</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(name)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(age)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.25,words:1275},title:"输入与输出：Python与世界的对话",type:"article"}}],["/programming-languages/python/05-conditional-statements.html",{loader:()=>n.e(3858).then(n.bind(n,4227)),meta:{date:1758543678e3,excerpt:"\n<p>小朋友们，你们在生活中是不是经常需要做决定？比如：如果今天下雨，就带雨伞；如果考试得了100分，就可以得到奖励。在Python的世界里，程序也可以做类似的决定，这就是通过条件语句实现的！</p>\n<h2>什么是条件语句？</h2>\n<p>条件语句就是让程序根据不同的条件执行不同的代码块。在Python中，条件语句主要有<code>if</code>语句、<code>if-else</code>语句和<code>if-elif-else</code>语句。</p>\n<h2>if语句</h2>\n<p><code>if</code>语句是最基本的条件语句，它的结构是：如果某个条件为真，就执行相应的代码块。</p>",readingTime:{minutes:4.6,words:1379},title:"条件语句：Python的判断能力",type:"article"}}],["/programming-languages/python/06-loop-statements.html",{loader:()=>n.e(2361).then(n.bind(n,6007)),meta:{date:1758543678e3,excerpt:'\n<p>小朋友们，你们有没有做过需要重复很多次的事情？比如跳绳、做数学题或者读课文。在Python中，我们也可以让程序重复执行某些操作，这就是通过循环语句实现的！</p>\n<h2>为什么需要循环？</h2>\n<p>循环可以帮助我们避免编写重复的代码。比如，如果我们想输出1到10的数字，如果没有循环，我们需要写10个<code>print()</code>语句：</p>\n<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.81,words:1443},title:"循环语句：Python的重复魔法",type:"article"}}],["/programming-languages/python/07-practice-summary.html",{loader:()=>n.e(405).then(n.bind(n,6352)),meta:{date:1758543678e3,excerpt:"\n<p>小朋友们，我们已经学了Python的很多基础知识，包括变量、数据类型、运算符、输入输出、条件语句和循环语句。现在是时候通过一些有趣的练习来巩固这些知识了！</p>\n<h2>知识回顾</h2>\n<p>让我们先快速回顾一下我们学过的内容：</p>\n<ol>\n<li>\n<p><strong>变量与数据类型</strong>：Python中的基本数据类型包括整数（int）、浮点数（float）、字符串（str）和布尔值（bool）。</p>\n</li>\n<li>\n<p><strong>运算符</strong>：包括算术运算符（+、-、*、/等）、赋值运算符（=、+=、-=等）、比较运算符（==、!=、&gt;、&lt;等）和逻辑运算符（and、or、not）。</p>\n</li>\n<li>\n<p><strong>输入与输出</strong>：使用<code>print()</code>函数输出信息，使用<code>input()</code>函数获取用户输入。</p>\n</li>\n<li>\n<p><strong>条件语句</strong>：使用<code>if</code>、<code>if-else</code>和<code>if-elif-else</code>语句让程序根据条件做出不同的决定。</p>\n</li>\n<li>\n<p><strong>循环语句</strong>：使用<code>for</code>循环和<code>while</code>循环让程序重复执行某些操作。</p>\n</li>\n</ol>",readingTime:{minutes:12.68,words:3805},title:"实战小练习与总结：巩固Python基础",type:"article"}}],["/programming-languages/python/08-lists.html",{loader:()=>n.e(6965).then(n.bind(n,4141)),meta:{date:1758543678e3,excerpt:"\n<p>在之前的学习中，我们学习了如何使用变量存储单个数据。但是，在实际编程中，我们经常需要处理一组相关的数据。这时候，我们就需要使用Python中的<strong>列表（List）</strong> 这种数据结构。</p>\n<h2>什么是列表？</h2>\n<p>列表是Python中最常用的数据类型之一，它是一个有序的、可变的数据集合。列表可以包含不同类型的元素，比如整数、浮点数、字符串等，甚至可以包含其他列表。</p>\n<p>在Python中，列表用方括号 <code>[]</code> 来表示，元素之间用逗号 <code>,</code> 分隔。</p>\n<h2>创建列表</h2>\n<p>让我们来看看如何创建一个列表：</p>",readingTime:{minutes:11.74,words:3522},title:"列表（Lists）：Python中的数据集合",type:"article"}}],["/programming-languages/python/09-tuples-sets-dictionaries.html",{loader:()=>n.e(2005).then(n.bind(n,1156)),meta:{date:1758543678e3,excerpt:"\n<p>在前面的课程中，我们学习了Python中的列表（List）这种数据结构。今天，我们将学习Python中的另外三种重要的数据结构：<strong>元组（Tuple）</strong>、<strong>集合（Set）</strong> 和 <strong>字典（Dictionary）</strong>。这些数据结构各有特点，可以帮助我们解决不同的问题。</p>\n<h2>元组（Tuple）</h2>\n<h3>什么是元组？</h3>\n<p>元组是一个有序的、不可变的数据集合。它与列表非常相似，但是元组一旦创建就不能被修改。在Python中，元组用圆括号 <code>()</code> 来表示，元素之间用逗号 <code>,</code> 分隔。</p>",readingTime:{minutes:17.53,words:5258},title:"元组、集合和字典：更多Python数据结构",type:"article"}}],["/programming-languages/python/10-strings-and-regular-expressions.html",{loader:()=>n.e(5172).then(n.bind(n,2760)),meta:{date:1758543678e3,excerpt:'\n<p>字符串是编程中最常用的数据类型之一，用于表示文本信息。在Python中，字符串是不可变的字符序列。本节课，我们将深入学习Python中的字符串操作，以及如何使用正则表达式进行更复杂的文本处理。</p>\n<h2>字符串的基本操作</h2>\n<h3>字符串的创建</h3>\n<p>在Python中，我们可以使用单引号、双引号或三引号来创建字符串：</p>\n<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 使用单引号创建字符串</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">s1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'Hello, World!\'</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(s1)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 使用双引号创建字符串</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">s2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Hello, World!"</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(s2)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 使用三引号创建多行字符串</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">s3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'\'\'Hello,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">World!\'\'\'</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(s3)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 也可以使用三个双引号</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">s4 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> """Hello,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">World!"""</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(s4)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:17.56,words:5268},title:"字符串与正则表达式：文本处理的利器",type:"article"}}],["/programming-languages/python/11-functions.html",{loader:()=>n.e(3383).then(n.bind(n,3725)),meta:{date:1758543678e3,excerpt:'\n<p>函数是组织好的、可重复使用的、用来实现特定功能的代码块。在Python中，函数是一等公民，可以像其他数据类型一样被传递、赋值和返回。本节课，我们将学习Python函数的定义、调用、参数类型、作用域等内容。</p>\n<h2>函数的定义与调用</h2>\n<h3>函数的定义</h3>\n<p>在Python中，我们使用 <code>def</code> 关键字来定义函数。函数定义的基本语法如下：</p>\n<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> function_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">parameters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    """函数文档字符串（可选）"""</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 函数体</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 执行代码</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> expression  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 返回值（可选）</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:20.03,words:6009},title:"函数：代码的模块化与复用",type:"article"}}],["/programming-languages/python/12-modules-packages.html",{loader:()=>n.e(4094).then(n.bind(n,3871)),meta:{date:1758543678e3,excerpt:"\n<p>在Python中，模块是一个包含Python定义和语句的文件，其文件名就是模块名加上<code>.py</code>后缀。包是一个包含多个模块的目录，用于组织相关的模块。本节课，我们将学习Python中模块和包的概念、导入和使用方法，以及如何创建自己的模块和包。</p>\n<h2>模块的基本概念</h2>\n<p>模块是Python程序组织结构的一个重要层次。每个Python文件都是一个模块，模块名就是文件名（不包括扩展名<code>.py</code>）。使用模块可以：</p>\n<ol>\n<li>组织相关的代码，使代码更加清晰和易于维护</li>\n<li>实现代码的重用</li>\n<li>避免命名冲突</li>\n</ol>",readingTime:{minutes:24.78,words:7435},title:"模块与包：代码的组织与重用",type:"article"}}],["/programming-languages/python/13-exceptions-handling.html",{loader:()=>n.e(3896).then(n.bind(n,9881)),meta:{date:1758543678e3,excerpt:"\n<p>在编程过程中，错误是不可避免的。Python提供了强大的异常处理机制，使我们能够优雅地处理程序运行过程中出现的各种错误，而不是让程序直接崩溃。本节课，我们将学习Python中的异常处理机制，包括异常的基本概念、异常处理语句、自定义异常等内容。</p>\n<h2>异常的基本概念</h2>\n<p>异常是程序运行过程中出现的错误事件。当Python无法正常执行程序时，就会抛出一个异常。如果不处理这个异常，程序就会终止并显示错误信息。</p>\n<h3>常见的异常类型</h3>\n<p>Python内置了许多异常类型，用于表示不同类型的错误。下面是一些常见的异常类型：</p>\n<table>\n<thead>\n<tr>\n<th>异常类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>SyntaxError</code></td>\n<td>语法错误，代码不符合Python语法规范</td>\n</tr>\n<tr>\n<td><code>NameError</code></td>\n<td>尝试访问一个未定义的变量或函数</td>\n</tr>\n<tr>\n<td><code>TypeError</code></td>\n<td>操作或函数应用于不适当类型的对象</td>\n</tr>\n<tr>\n<td><code>ValueError</code></td>\n<td>操作或函数接收到了正确类型但值不适当的参数</td>\n</tr>\n<tr>\n<td><code>ZeroDivisionError</code></td>\n<td>除数为零</td>\n</tr>\n<tr>\n<td><code>IndexError</code></td>\n<td>索引超出序列的范围</td>\n</tr>\n<tr>\n<td><code>KeyError</code></td>\n<td>尝试访问字典中不存在的键</td>\n</tr>\n<tr>\n<td><code>FileNotFoundError</code></td>\n<td>尝试打开一个不存在的文件</td>\n</tr>\n<tr>\n<td><code>IOError</code></td>\n<td>输入/输出操作失败</td>\n</tr>\n<tr>\n<td><code>ImportError</code></td>\n<td>导入模块失败</td>\n</tr>\n<tr>\n<td><code>AttributeError</code></td>\n<td>尝试访问对象不存在的属性或方法</td>\n</tr>\n</tbody>\n</table>",readingTime:{minutes:23.85,words:7155},title:"异常处理：优雅地应对错误",type:"article"}}],["/programming-languages/python/14-file-handling.html",{loader:()=>n.e(1817).then(n.bind(n,272)),meta:{date:1758543678e3,excerpt:"\n<p>在编程过程中，我们经常需要与外部文件进行交互，例如读取配置文件、处理数据文件、保存程序输出等。Python提供了丰富的文件操作功能，使我们能够方便地进行文件的读写和管理。本节课，我们将学习Python中的文件操作，包括文件的打开、读取、写入、关闭等基本操作，以及一些高级的文件处理技术。</p>\n<h2>文件操作的基本概念</h2>\n<p>在Python中，文件操作主要通过内置的<code>open()</code>函数来实现。<code>open()</code>函数用于打开一个文件，并返回一个文件对象，我们可以通过这个文件对象来进行各种文件操作。</p>\n<h3>文件的打开模式</h3>",readingTime:{minutes:37.54,words:11263},title:"文件操作：读写外部数据",type:"article"}}],["/programming-languages/python/15-object-oriented-programming.html",{loader:()=>n.e(6160).then(n.bind(n,5498)),meta:{date:1758543678e3,excerpt:'\n<p>在前面的课程中，我们学习了Python的基本语法、数据结构、函数、模块和文件操作等内容。从本节课开始，我们将进入Python编程中的一个重要概念——面向对象编程（Object-Oriented Programming，简称OOP）。面向对象编程是一种编程范式，它将数据和操作数据的方法封装在一起，形成对象。</p>\n<h2>15.1 面向对象编程的基本概念</h2>\n<p>面向对象编程是一种编程思想，它强调将现实世界中的事物抽象成程序中的对象，每个对象都有自己的属性（数据）和行为（方法）。面向对象编程有以下几个核心概念：</p>\n<ol>\n<li>\n<p><strong>类（Class）</strong>：类是对象的蓝图或模板，它定义了对象的属性和方法。例如，"人"可以是一个类，它定义了人的共同属性（如姓名、年龄、性别等）和行为（如吃饭、睡觉、工作等）。</p>\n</li>\n<li>\n<p><strong>对象（Object）</strong>：对象是类的实例，是具体的事物。例如，"张三"可以是"人"这个类的一个对象，他有具体的姓名、年龄和性别，以及具体的吃饭、睡觉和工作的行为。</p>\n</li>\n<li>\n<p><strong>属性（Attribute）</strong>：属性是对象的特征或状态，通常用变量来表示。例如，人的姓名、年龄、性别等都是属性。</p>\n</li>\n<li>\n<p><strong>方法（Method）</strong>：方法是对象的行为或动作，通常用函数来表示。例如，人的吃饭、睡觉、工作等都是方法。</p>\n</li>\n<li>\n<p><strong>封装（Encapsulation）</strong>：封装是指将对象的属性和方法包装在一起，对外提供有限的接口，隐藏内部的实现细节。</p>\n</li>\n<li>\n<p><strong>继承（Inheritance）</strong>：继承是指一个类可以继承另一个类的属性和方法，从而实现代码的复用和扩展。</p>\n</li>\n<li>\n<p><strong>多态（Polymorphism）</strong>：多态是指不同的对象可以对同一个消息做出不同的响应。</p>\n</li>\n<li>\n<p><strong>抽象（Abstraction）</strong>：抽象是指忽略对象的非本质特征，只关注与当前问题相关的特征。</p>\n</li>\n</ol>',readingTime:{minutes:19.16,words:5748},title:"面向对象编程基础",type:"article"}}],["/programming-languages/python/16-advanced-oop.html",{loader:()=>n.e(3722).then(n.bind(n,8330)),meta:{date:1758543678e3,excerpt:'\n<p>在上一节课中，我们学习了Python面向对象编程的基本概念，包括类的定义和使用、继承、多态、封装和特殊方法等内容。在本节课中，我们将继续学习Python面向对象编程的高级特性，包括抽象类、接口、多重继承、组合与聚合、设计模式等内容。</p>\n<h2>16.1 抽象类</h2>\n<p>抽象类是一种特殊的类，它不能被实例化，只能被继承。抽象类的主要作用是定义接口，即规定子类必须实现哪些方法。在Python中，我们可以使用<code>abc</code>（Abstract Base Classes）模块来创建抽象类。</p>\n<p>下面是一个简单的例子，展示了如何创建抽象类：</p>\n<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> abc </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66"> ABC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, abstractmethod</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Shape</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66">ABC</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    """表示几何图形的抽象类"""</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    @abstractmethod</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> area</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        """计算面积（抽象方法）"""</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        pass</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    @abstractmethod</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> perimeter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        """计算周长（抽象方法）"""</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        pass</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> display</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        """显示图形信息（具体方法）"""</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">        print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"面积：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF">area</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">        print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"周长：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF">perimeter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Circle</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Shape</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    """表示圆形的类，继承自Shape抽象类"""</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> radius</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        """初始化Circle对象</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        参数:</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">            radius: 半径</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        """</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.radius </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> radius</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> area</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        """计算圆形的面积"""</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> math</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> math.pi </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.radius </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">**</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> perimeter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        """计算圆形的周长"""</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> math</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> math.pi </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.radius</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Rectangle</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Shape</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    """表示矩形的类，继承自Shape抽象类"""</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        """初始化Rectangle对象</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        参数:</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">            width: 宽度</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">            height: 高度</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        """</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.width </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> width</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.height </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> height</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> area</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        """计算矩形的面积"""</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.width </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.height</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> perimeter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        """计算矩形的周长"""</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.width </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.height)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 尝试实例化抽象类（会报错）</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># shape = Shape()  # TypeError: Can\'t instantiate abstract class Shape with abstract methods area, perimeter</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 实例化具体的子类</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">circle </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF"> Circle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">rectangle </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF"> Rectangle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 调用继承的方法</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">circle.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF">display</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 输出：</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 面积：78.53981633974483</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 周长：31.41592653589793</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">rectangle.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF">display</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 输出：</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 面积：24</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 周长：20</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:29.79,words:8938},title:"面向对象编程高级特性",type:"article"}}],["/programming-languages/python/17-iterators-generators-coroutines.html",{loader:()=>n.e(6628).then(n.bind(n,3907)),meta:{date:1758543678e3,excerpt:"\n<p>在Python中，迭代器、生成器和协程是三个强大的概念，它们可以帮助我们编写更加高效、简洁和灵活的代码。在本节课中，我们将学习迭代器、生成器和协程的基本概念、使用方法和应用场景。</p>\n<h2>17.1 迭代器</h2>\n<p>迭代器（Iterator）是Python中一个重要的概念，它是一种可以遍历容器中元素的对象。迭代器提供了一种统一的方式来访问容器中的元素，而不需要关心容器的内部实现细节。</p>\n<h3>17.1.1 迭代器协议</h3>\n<p>在Python中，迭代器协议（Iterator Protocol）定义了迭代器应该具有的接口。具体来说，一个对象要成为迭代器，必须实现两个特殊方法：</p>",readingTime:{minutes:18.72,words:5616},title:"迭代器、生成器与协程",type:"article"}}],["/programming-languages/python/18-context-managers-decorators.html",{loader:()=>n.e(3798).then(n.bind(n,8151)),meta:{date:1758543678e3,excerpt:"\n<p>在Python中，上下文管理器和装饰器是两个强大的特性，它们可以帮助我们编写更加简洁、优雅和可维护的代码。在本节课中，我们将学习上下文管理器和装饰器的基本概念、使用方法和应用场景。</p>\n<h2>18.1 上下文管理器</h2>\n<p>上下文管理器（Context Manager）是一种可以在特定的上下文中执行代码的对象，它主要用于资源管理，如文件操作、网络连接等。上下文管理器最常见的使用方式是与<code>with</code>语句一起使用，它可以确保在代码块执行完毕后，无论代码块是否抛出异常，都会正确地释放资源。</p>\n<h3>18.1.1 with语句</h3>\n<p><code>with</code>语句是Python中用于简化资源管理的语法糖，它可以确保在代码块执行完毕后，无论代码块是否抛出异常，都会正确地释放资源。<code>with</code>语句的基本语法如下：</p>",readingTime:{minutes:22.55,words:6766},title:"上下文管理器与装饰器",type:"article"}}],["/programming-languages/python/19-advanced-topics.html",{loader:()=>n.e(6083).then(n.bind(n,9380)),meta:{date:1758543678e3,excerpt:"\n<p>在Python中，有许多高级主题和特性，它们可以帮助我们编写更加灵活、高效和强大的代码。在本节课中，我们将学习一些Python的高级主题，如元编程、描述符、属性装饰器、动态导入、模块导入路径等。</p>\n<h2>19.1 元编程</h2>\n<p>元编程（Metaprogramming）是指编写能够操作代码的代码，即代码可以在运行时生成、修改或分析其他代码。Python提供了多种元编程的机制，如反射、装饰器、元类等。</p>\n<h3>19.1.1 反射</h3>\n<p>反射（Reflection）是指程序在运行时可以访问、检测和修改其自身状态或行为的能力。Python提供了多种内置函数和模块，用于实现反射功能，如<code>getattr()</code>、<code>setattr()</code>、<code>hasattr()</code>、<code>dir()</code>、<code>inspect</code>模块等。</p>",readingTime:{minutes:18.1,words:5429},title:"高级主题",type:"article"}}],["/programming-languages/python/20-concurrency.html",{loader:()=>n.e(8481).then(n.bind(n,6143)),meta:{date:1758543678e3,excerpt:"\n<p>在当今计算机系统中，多核处理器已经成为主流。为了充分利用多核处理器的性能，并发编程变得越来越重要。Python提供了多种并发编程的机制，如多线程、多进程、异步编程等。在本节课中，我们将学习Python中的并发编程相关知识。</p>\n<h2>20.1 多线程编程</h2>\n<p>多线程编程是一种并发编程的方式，它允许在一个进程内创建多个线程，每个线程可以执行不同的任务。Python中的多线程编程主要通过<code>threading</code>模块实现。</p>\n<h3>20.1.1 线程的基本概念</h3>\n<p>线程是操作系统能够进行调度的最小单位，它被包含在进程中，是进程中的实际运作单位。一个进程可以包含多个线程，这些线程共享进程的资源，如内存空间、文件描述符等，但每个线程有自己的程序计数器、寄存器和栈。</p>",readingTime:{minutes:23.99,words:7196},title:"并发编程",type:"article"}}],["/programming-languages/python/21-network-programming.html",{loader:()=>n.e(9151).then(n.bind(n,8524)),meta:{date:1758543678e3,excerpt:"\n<p>网络编程是现代软件开发中不可或缺的一部分，它允许程序通过网络与其他程序进行通信。Python提供了丰富的网络编程库和框架，使得开发网络应用变得简单和高效。在本节课中，我们将学习Python中的网络编程相关知识。</p>\n<h2>21.1 网络编程基础</h2>\n<p>在开始学习Python网络编程之前，我们需要了解一些网络编程的基础知识，如IP地址、端口、TCP/IP协议、Socket等。</p>\n<h3>21.1.1 IP地址和端口</h3>\n<p>IP地址是互联网上每个设备的唯一标识，它用于在网络中定位和识别设备。IPv4（互联网协议版本4）使用32位地址，通常表示为四个用点分隔的十进制数，如<code>192.168.1.1</code>。IPv6（互联网协议版本6）使用128位地址，通常表示为八个用冒号分隔的十六进制数，如<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code>。</p>",readingTime:{minutes:26.49,words:7948},title:"网络编程",type:"article"}}],["/programming-languages/python/22-database-programming.html",{loader:()=>n.e(9247).then(n.bind(n,5979)),meta:{date:1758543678e3,excerpt:"\n<p>数据库是现代应用程序的重要组成部分，它用于存储、管理和检索数据。Python提供了丰富的数据库编程库和框架，使得与各种数据库系统进行交互变得简单和高效。在本节课中，我们将学习Python中的数据库编程相关知识。</p>\n<h2>22.1 数据库基础概念</h2>\n<p>在开始学习Python数据库编程之前，我们需要了解一些数据库的基础知识，如数据库类型、SQL语句、数据库连接等。</p>\n<h3>22.1.1 数据库类型</h3>\n<p>数据库可以分为关系型数据库和非关系型数据库两大类：</p>\n<ol>\n<li>\n<p><strong>关系型数据库</strong>：关系型数据库使用表（table）来组织数据，表由行（row）和列（column）组成，行代表记录，列代表字段。关系型数据库使用SQL（结构化查询语言）来操作数据，支持事务、外键等特性。常见的关系型数据库有MySQL、PostgreSQL、Oracle、SQLite、SQL Server等。</p>\n</li>\n<li>\n<p><strong>非关系型数据库</strong>：非关系型数据库（也称为NoSQL数据库）不使用表来组织数据，而是使用其他数据模型，如键值对、文档、列族、图等。非关系型数据库通常具有更好的扩展性和性能，适用于处理大量非结构化或半结构化数据。常见的非关系型数据库有MongoDB、Redis、Cassandra、Elasticsearch等。</p>\n</li>\n</ol>",readingTime:{minutes:24.04,words:7213},title:"数据库编程",type:"article"}}],["/programming-languages/python/23-gui-programming.html",{loader:()=>n.e(9252).then(n.bind(n,1746)),meta:{date:1758543678e3,excerpt:"\n<p>GUI（图形用户界面）是现代应用程序的重要组成部分，它使用图形元素（如窗口、按钮、菜单等）来帮助用户与程序进行交互。Python提供了多种GUI库，使得开发图形界面应用变得简单和高效。在本节课中，我们将学习Python中的GUI编程相关知识。</p>\n<h2>23.1 GUI编程基础</h2>\n<p>在开始学习Python的GUI编程之前，我们需要了解一些GUI编程的基础知识，如GUI的组成元素、事件驱动编程模型等。</p>\n<h3>23.1.1 GUI的组成元素</h3>\n<p>一个典型的GUI应用程序通常由以下元素组成：</p>\n<ol>\n<li><strong>窗口（Window）</strong>：应用程序的主要容器，它可以包含其他GUI元素。</li>\n<li><strong>按钮（Button）</strong>：用于触发动作的可点击元素。</li>\n<li><strong>标签（Label）</strong>：用于显示文本或图像的元素。</li>\n<li><strong>输入框（Entry/TextField）</strong>：用于接收用户输入的文本框。</li>\n<li><strong>文本框（Text）</strong>：用于显示或编辑多行文本的区域。</li>\n<li><strong>复选框（Checkbox）</strong>：用于表示二元选择的元素。</li>\n<li><strong>单选按钮（RadioButton）</strong>：用于从多个选项中选择一个的元素。</li>\n<li><strong>下拉菜单（ComboBox/DropdownList）</strong>：用于从多个选项中选择一个的下拉列表。</li>\n<li><strong>滚动条（Scrollbar）</strong>：用于在内容超出可见区域时滚动查看。</li>\n<li><strong>菜单（Menu）</strong>：包含命令的下拉列表，通常位于窗口顶部。</li>\n<li><strong>对话框（Dialog）</strong>：用于显示信息或接收用户输入的弹出窗口。</li>\n<li><strong>布局管理器（Layout Manager）</strong>：用于控制GUI元素在窗口中的排列方式。</li>\n</ol>",readingTime:{minutes:31.23,words:9369},title:"GUI编程",type:"article"}}],["/programming-languages/python/24-graphics-and-multimedia.html",{loader:()=>n.e(4369).then(n.bind(n,9505)),meta:{date:1758543678e3,excerpt:"\n<p>图形和多媒体处理是Python编程中的重要领域，它涉及图像、音频、视频等媒体的创建、修改和分析。Python提供了丰富的库和工具，使得图形和多媒体处理变得简单和高效。在本节课中，我们将学习Python中的图形和多媒体处理相关知识。</p>\n<h2>24.1 图形处理基础</h2>\n<p>图形处理是指对图像进行各种操作，如读取、显示、修改、保存等。Python中有许多用于图形处理的库，其中最常用的是PIL（Python Imaging Library）及其分支Pillow。</p>\n<h3>24.1.1 PIL/Pillow库</h3>\n<p>PIL（Python Imaging Library）是Python中最常用的图像处理库之一，但由于它不再积极维护，现在通常使用它的分支Pillow，Pillow是PIL的一个友好分支，提供了相同的功能，并添加了一些新的特性和改进。</p>",readingTime:{minutes:36.54,words:10961},title:"图形和多媒体处理",type:"article"}}],["/programming-languages/python/25-scientific-computing-data-analysis.html",{loader:()=>n.e(1912).then(n.bind(n,8158)),meta:{date:1758543678e3,excerpt:"\n<p>在当今数据驱动的世界中，科学计算和数据分析已经成为许多领域的核心能力。Python凭借其丰富的科学计算库和数据分析工具，已经成为科学家、工程师、数据分析师的首选编程语言之一。在本节课中，我们将学习Python中的科学计算和数据分析相关知识，包括NumPy、pandas、SciPy等库的使用，以及数据清洗、分析、可视化等技术。</p>\n<h2>25.1 NumPy库</h2>\n<p>NumPy（Numerical Python）是Python中用于科学计算的基础库，它提供了高效的多维数组对象、各种派生对象（如掩码数组和矩阵）以及用于数组快速操作的各种API。NumPy是许多其他Python科学计算库的基础，如pandas、SciPy、scikit-learn等。</p>",readingTime:{minutes:50.47,words:15140},title:"科学计算和数据分析",type:"article"}}],["/programming-languages/python/",{loader:()=>n.e(621).then(n.bind(n,8392)),meta:{date:1758543559e3,excerpt:'\n<p>你好呀！欢迎来到Python的奇妙世界！Python就像是一把打开编程世界大门的魔法钥匙，它简单易学，功能强大，由荷兰人吉多·范罗苏姆在1989年圣诞节期间创造。Python的设计理念是"优雅"、"明确"、"简单"，所以它的代码读起来就像读英语一样容易理解！</p>\n<h2>为什么说Python很特别？</h2>\n<p>Python就像是一位友好的编程老师，它会耐心地引导你进入编程的世界：</p>\n<ul>\n<li><strong>简单易学</strong>：Python的语法非常接近自然语言，就像写英语句子一样简单</li>\n<li><strong>功能强大</strong>：虽然简单，但Python可以完成从简单的小游戏到复杂的人工智能等各种任务</li>\n<li><strong>无处不在</strong>：Python被用于Web开发、数据分析、人工智能、科学计算等各个领域</li>\n<li><strong>丰富的库</strong>：Python有大量现成的"工具箱"（库），让你可以轻松完成各种任务</li>\n<li><strong>社区活跃</strong>：全球有数百万人在使用Python，你可以轻松找到帮助和资源</li>\n</ul>',readingTime:{minutes:3.86,words:1158},title:"Python语言入门：编程世界的魔法钥匙",type:"article"}}],["/404.html",{loader:()=>n.e(7490).then(n.bind(n,9866)),meta:{title:""}}],["/category/",{loader:()=>n.e(3583).then(n.bind(n,1623)),meta:{title:"分类",index:!1}}],["/tag/",{loader:()=>n.e(1797).then(n.bind(n,8685)),meta:{title:"标签",index:!1}}],["/article/",{loader:()=>n.e(7511).then(n.bind(n,1982)),meta:{title:"文章",index:!1}}],["/star/",{loader:()=>n.e(7199).then(n.bind(n,5887)),meta:{title:"星标",index:!1}}],["/timeline/",{loader:()=>n.e(5464).then(n.bind(n,9322)),meta:{title:"时间轴",index:!1}}]])},8761:(i,s,n)=>{n.d(s,{U:()=>a});const a=JSON.parse('{"base":"/GahooChenBlog/","lang":"zh-CN","title":"GahooChen的个人博客","description":"分享技术，分享快乐","head":[["link",{"rel":"icon","href":"/GahooChenBlog/favicon.ico"}]],"locales":{}}')}},i=>{i.O(0,[1363,7258],()=>i(i.s=1978)),i.O()}]);