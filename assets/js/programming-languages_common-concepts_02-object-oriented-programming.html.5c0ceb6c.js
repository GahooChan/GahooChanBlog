"use strict";(self.webpackChunkgahoochen_blog=self.webpackChunkgahoochen_blog||[]).push([[6643],{3221:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},5987:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>h,data:()=>t});var n=a(4089);const l={},h=(0,a(3221).A)(l,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,[...s[0]||(s[0]=[(0,n.Fv)('<h1 id="面向对象编程基础" tabindex="-1"><a class="header-anchor" href="#面向对象编程基础"><span>面向对象编程基础</span></a></h1><p>面向对象编程（Object-Oriented Programming，OOP）是一种重要的编程范式，它将现实世界中的事物抽象为程序中的对象，通过对象之间的交互来解决问题。在这篇文章中，我们将介绍面向对象编程的基本概念、核心原则和应用场景。</p><h2 id="一、什么是面向对象编程" tabindex="-1"><a class="header-anchor" href="#一、什么是面向对象编程"><span>一、什么是面向对象编程？</span></a></h2><p>面向对象编程是一种以对象为中心的编程思想，它将数据（属性）和操作数据的方法（函数）封装在一个对象中，使对象成为程序的基本构建块。在面向对象编程中，我们关注的是<strong>谁来完成任务</strong>，而不仅仅是<strong>如何完成任务</strong>。</p><p>面向对象编程的核心是对象，对象是对现实世界中事物的抽象，它具有：</p><ul><li><strong>状态</strong>：对象的属性，用于描述对象的特征</li><li><strong>行为</strong>：对象的方法，用于描述对象可以执行的操作</li></ul><h2 id="二、面向对象编程的核心原则" tabindex="-1"><a class="header-anchor" href="#二、面向对象编程的核心原则"><span>二、面向对象编程的核心原则</span></a></h2><h3 id="_2-1-封装-encapsulation" tabindex="-1"><a class="header-anchor" href="#_2-1-封装-encapsulation"><span>2.1 封装（Encapsulation）</span></a></h3><p>封装是将对象的状态和行为组合在一起，并对外部隐藏对象的实现细节的机制。它通过访问控制（如公有、私有、受保护等访问级别）来限制对对象内部状态的直接访问，只能通过对象提供的方法来访问和修改对象的状态。</p><p>封装的主要优点包括：</p><ul><li>保护对象的数据不被外部随意修改</li><li>隐藏实现细节，提供清晰的接口</li><li>提高代码的可维护性和安全性</li></ul><h3 id="_2-2-继承-inheritance" tabindex="-1"><a class="header-anchor" href="#_2-2-继承-inheritance"><span>2.2 继承（Inheritance）</span></a></h3><p>继承是一种创建新类的方式，新类可以继承现有类的属性和方法，同时还可以添加自己的属性和方法或重写父类的方法。通过继承，可以实现代码的复用和扩展。</p><p>在继承关系中，被继承的类称为父类（或基类），继承父类的类称为子类（或派生类）。</p><h3 id="_2-3-多态-polymorphism" tabindex="-1"><a class="header-anchor" href="#_2-3-多态-polymorphism"><span>2.3 多态（Polymorphism）</span></a></h3><p>多态是指同一个方法名在不同的对象上可以有不同的实现方式。多态允许我们使用统一的接口来处理不同类型的对象，而不需要关心对象的具体类型。</p><p>多态通常通过方法重写（Override）和方法重载（Overload）来实现。</p><h3 id="_2-4-抽象-abstraction" tabindex="-1"><a class="header-anchor" href="#_2-4-抽象-abstraction"><span>2.4 抽象（Abstraction）</span></a></h3><p>抽象是指忽略事物的非本质特征，只关注与当前问题相关的本质特征的过程。在面向对象编程中，抽象可以通过抽象类和接口来实现，它们定义了对象应该具有的行为，但不提供具体的实现细节。</p><h2 id="三、面向对象编程的基本概念" tabindex="-1"><a class="header-anchor" href="#三、面向对象编程的基本概念"><span>三、面向对象编程的基本概念</span></a></h2><h3 id="_3-1-类-class" tabindex="-1"><a class="header-anchor" href="#_3-1-类-class"><span>3.1 类（Class）</span></a></h3><p>类是对象的蓝图或模板，它定义了对象的属性和方法。我们可以根据类创建多个具有相同属性和方法的对象。</p><p>类通常包含：</p><ul><li>属性（Attributes/Fields）：描述对象特征的数据</li><li>方法（Methods）：对象可以执行的操作</li><li>构造函数（Constructor）：创建对象时初始化对象的特殊方法</li></ul><h3 id="_3-2-对象-object" tabindex="-1"><a class="header-anchor" href="#_3-2-对象-object"><span>3.2 对象（Object）</span></a></h3><p>对象是类的实例，是具有特定状态和行为的具体实体。通过创建类的实例，我们可以得到一个具体的对象。</p><p>例如，如果&quot;汽车&quot;是一个类，那么&quot;我家的红色轿车&quot;就是一个对象。</p><h3 id="_3-3-属性-attribute-field" tabindex="-1"><a class="header-anchor" href="#_3-3-属性-attribute-field"><span>3.3 属性（Attribute/Field）</span></a></h3><p>属性是对象的特征或状态，用于存储对象的数据。每个对象都有自己的属性值，这些属性值决定了对象的当前状态。</p><p>例如，一个&quot;人&quot;对象可能有&quot;姓名&quot;、&quot;年龄&quot;、&quot;性别&quot;等属性。</p><h3 id="_3-4-方法-method" tabindex="-1"><a class="header-anchor" href="#_3-4-方法-method"><span>3.4 方法（Method）</span></a></h3><p>方法是对象可以执行的操作，它定义了对象的行为。方法可以访问和修改对象的属性，也可以与其他对象进行交互。</p><p>例如，一个&quot;人&quot;对象可能有&quot;走路&quot;、&quot;说话&quot;、&quot;吃饭&quot;等方法。</p><h3 id="_3-5-消息传递-message-passing" tabindex="-1"><a class="header-anchor" href="#_3-5-消息传递-message-passing"><span>3.5 消息传递（Message Passing）</span></a></h3><p>在面向对象编程中，对象之间的交互是通过消息传递来实现的。一个对象可以向另一个对象发送消息，请求它执行某个方法。</p><p>消息传递的过程通常包括：</p><ul><li>发送者对象</li><li>接收者对象</li><li>要执行的方法</li><li>传递的参数</li><li>返回的结果</li></ul><h2 id="四、面向对象编程的优缺点" tabindex="-1"><a class="header-anchor" href="#四、面向对象编程的优缺点"><span>四、面向对象编程的优缺点</span></a></h2><h3 id="_4-1-优点" tabindex="-1"><a class="header-anchor" href="#_4-1-优点"><span>4.1 优点</span></a></h3><ol><li><strong>代码复用</strong>：通过继承机制，可以复用已有的代码，减少重复开发</li><li><strong>可维护性</strong>：封装机制使得代码的实现细节被隐藏，修改一个对象的实现不会影响其他对象</li><li><strong>可扩展性</strong>：可以通过创建新的类和对象来扩展系统的功能，而不需要修改现有的代码</li><li><strong>灵活性</strong>：多态机制使得系统可以处理不同类型的对象，提高了系统的灵活性</li><li><strong>更好的建模能力</strong>：面向对象编程更接近现实世界的思维方式，有助于对复杂系统进行建模</li></ol><h3 id="_4-2-缺点" tabindex="-1"><a class="header-anchor" href="#_4-2-缺点"><span>4.2 缺点</span></a></h3><ol><li><strong>性能开销</strong>：对象的创建、销毁和方法调用会带来一定的性能开销</li><li><strong>学习曲线陡峭</strong>：面向对象编程的概念较多，理解和掌握需要一定的时间</li><li><strong>过度设计风险</strong>：可能会出现过度设计的情况，导致系统变得复杂和臃肿</li><li><strong>不适合简单问题</strong>：对于一些简单的任务，使用面向对象编程可能会增加不必要的复杂性</li></ol><h2 id="五、面向对象编程的应用场景" tabindex="-1"><a class="header-anchor" href="#五、面向对象编程的应用场景"><span>五、面向对象编程的应用场景</span></a></h2><p>面向对象编程适合于开发复杂的软件系统，特别是以下场景：</p><h3 id="_5-1-大型软件系统开发" tabindex="-1"><a class="header-anchor" href="#_5-1-大型软件系统开发"><span>5.1 大型软件系统开发</span></a></h3><p>对于大型软件系统，面向对象编程的封装、继承和多态特性可以帮助我们更好地组织和管理代码，提高代码的可维护性和可扩展性。</p><h3 id="_5-2-图形用户界面-gui-开发" tabindex="-1"><a class="header-anchor" href="#_5-2-图形用户界面-gui-开发"><span>5.2 图形用户界面（GUI）开发</span></a></h3><p>图形用户界面通常由多个交互元素组成，这些元素可以很自然地抽象为对象，因此GUI开发是面向对象编程的一个重要应用领域。</p><h3 id="_5-3-游戏开发" tabindex="-1"><a class="header-anchor" href="#_5-3-游戏开发"><span>5.3 游戏开发</span></a></h3><p>在游戏开发中，角色、场景、道具等都可以抽象为对象，对象之间的交互构成了游戏的核心逻辑。</p><h3 id="_5-4-企业级应用开发" tabindex="-1"><a class="header-anchor" href="#_5-4-企业级应用开发"><span>5.4 企业级应用开发</span></a></h3><p>企业级应用通常具有复杂的业务逻辑和数据结构，面向对象编程可以帮助我们更好地建模和实现这些业务逻辑。</p><h3 id="_5-5-模拟系统开发" tabindex="-1"><a class="header-anchor" href="#_5-5-模拟系统开发"><span>5.5 模拟系统开发</span></a></h3><p>面向对象编程非常适合开发模拟系统，因为它可以将现实世界中的事物和关系直接映射到程序中的对象和交互。</p><h2 id="六、面向对象编程的设计原则" tabindex="-1"><a class="header-anchor" href="#六、面向对象编程的设计原则"><span>六、面向对象编程的设计原则</span></a></h2><p>为了充分发挥面向对象编程的优势，我们应该遵循一些设计原则：</p><h3 id="_6-1-单一职责原则-srp" tabindex="-1"><a class="header-anchor" href="#_6-1-单一职责原则-srp"><span>6.1 单一职责原则（SRP）</span></a></h3><p>一个类应该只有一个引起它变化的原因，也就是说，一个类应该只负责一项功能。</p><h3 id="_6-2-开放封闭原则-ocp" tabindex="-1"><a class="header-anchor" href="#_6-2-开放封闭原则-ocp"><span>6.2 开放封闭原则（OCP）</span></a></h3><p>软件实体（类、模块、函数等）应该对扩展开放，对修改封闭。也就是说，我们应该通过扩展来实现新功能，而不是修改已有的代码。</p><h3 id="_6-3-里氏替换原则-lsp" tabindex="-1"><a class="header-anchor" href="#_6-3-里氏替换原则-lsp"><span>6.3 里氏替换原则（LSP）</span></a></h3><p>子类应该能够替换其父类并出现在父类能够出现的任何地方。也就是说，子类应该保持父类的行为契约。</p><h3 id="_6-4-接口隔离原则-isp" tabindex="-1"><a class="header-anchor" href="#_6-4-接口隔离原则-isp"><span>6.4 接口隔离原则（ISP）</span></a></h3><p>客户端不应该被迫依赖于它不使用的方法。也就是说，接口应该尽可能小而专一。</p><h3 id="_6-5-依赖倒置原则-dip" tabindex="-1"><a class="header-anchor" href="#_6-5-依赖倒置原则-dip"><span>6.5 依赖倒置原则（DIP）</span></a></h3><p>高层模块不应该依赖于低层模块，它们都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p><h3 id="_6-6-组合优于继承原则" tabindex="-1"><a class="header-anchor" href="#_6-6-组合优于继承原则"><span>6.6 组合优于继承原则</span></a></h3><p>在设计中，我们应该优先使用组合关系（对象之间的关联）而不是继承关系来实现代码的复用和扩展。</p><h3 id="_6-7-迪米特法则-lod" tabindex="-1"><a class="header-anchor" href="#_6-7-迪米特法则-lod"><span>6.7 迪米特法则（LoD）</span></a></h3><p>一个对象应该对其他对象有尽可能少的了解，只与直接的朋友通信。</p><h2 id="七、面向对象编程的代码示例" tabindex="-1"><a class="header-anchor" href="#七、面向对象编程的代码示例"><span>七、面向对象编程的代码示例</span></a></h2><p>下面是一个使用面向对象编程思想实现的简单图形类层次结构示例：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义一个抽象的图形类</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Shape</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 构造函数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;black&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.color </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> color  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 属性：颜色</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 抽象方法：计算面积（具体实现由子类提供）</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> calculate_area</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        pass</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 方法：设置颜色</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> set_color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.color </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> color</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 方法：获取颜色</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> get_color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.color</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义矩形类，继承自图形类</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Rectangle</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Shape</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 构造函数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;black&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(color)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 调用父类的构造函数</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.width </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> width  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 属性：宽度</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.height </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> height  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 属性：高度</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 重写父类的方法：计算面积</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> calculate_area</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.width </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.height</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义圆形类，继承自图形类</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Circle</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Shape</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 构造函数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> radius</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;black&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(color)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 调用父类的构造函数</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.radius </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> radius  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 属性：半径</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 重写父类的方法：计算面积</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> calculate_area</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> math</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> math.pi </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.radius </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.radius</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 测试代码</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> __name__</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;__main__&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 创建一个矩形对象</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    rectangle </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Rectangle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;blue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;矩形颜色: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rectangle.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get_color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;矩形面积: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rectangle.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">calculate_area</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 创建一个圆形对象</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    circle </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Circle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;red&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;圆形颜色: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">circle.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get_color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;圆形面积: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">circle.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">calculate_area</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 多态示例：使用相同的接口处理不同类型的对象</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    shapes </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [rectangle, circle]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    total_area </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> shape </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> shapes:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        total_area </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> shape.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">calculate_area</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;总面积: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">total_area</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例展示了面向对象编程的核心特性：</p><ul><li>封装：每个类封装了自己的数据和方法</li><li>继承：Rectangle和Circle类继承了Shape类的属性和方法</li><li>多态：通过calculate_area()方法的重写，实现了多态</li><li>抽象：Shape类定义了抽象的接口</li></ul><h2 id="八、面向对象编程与其他编程范式的关系" tabindex="-1"><a class="header-anchor" href="#八、面向对象编程与其他编程范式的关系"><span>八、面向对象编程与其他编程范式的关系</span></a></h2><h3 id="_8-1-与面向过程编程的关系" tabindex="-1"><a class="header-anchor" href="#_8-1-与面向过程编程的关系"><span>8.1 与面向过程编程的关系</span></a></h3><p>面向对象编程可以看作是在面向过程编程的基础上发展而来的，它引入了封装、继承和多态等概念，更好地支持代码的组织和管理。在面向对象编程中，函数（方法）被封装在类中，与数据（属性）结合在一起。</p><p>实际上，许多现代编程语言都支持多种编程范式，程序员可以根据具体问题的特点选择合适的编程方式。即使在面向对象编程中，我们有时也会使用面向过程的思想来实现某些功能。</p><h3 id="_8-2-与函数式编程的关系" tabindex="-1"><a class="header-anchor" href="#_8-2-与函数式编程的关系"><span>8.2 与函数式编程的关系</span></a></h3><p>函数式编程是另一种重要的编程范式，它强调将计算视为数学函数的求值，避免使用可变状态和副作用。函数式编程和面向对象编程并不是互斥的，一些现代编程语言（如Scala、Python）同时支持这两种编程范式。</p><h2 id="九、小结" tabindex="-1"><a class="header-anchor" href="#九、小结"><span>九、小结</span></a></h2><p>面向对象编程是一种重要的编程范式，它将现实世界中的事物抽象为程序中的对象，通过对象之间的交互来解决问题。面向对象编程的核心原则包括封装、继承、多态和抽象，这些原则有助于提高代码的可复用性、可维护性和可扩展性。</p><p>了解面向对象编程的基本概念和原则，有助于我们更好地理解和使用现代编程语言，为开发复杂的软件系统打下坚实的基础。</p>',84)])])}]]),t=JSON.parse('{"path":"/programming-languages/common-concepts/02-object-oriented-programming.html","title":"面向对象编程基础","lang":"zh-CN","frontmatter":{"icon":"book-open","title":"面向对象编程基础","tags":["编程基础"],"category":"编程学习","date":"2025-09-18T00:00:00.000Z","description":"面向对象编程基础 面向对象编程（Object-Oriented Programming，OOP）是一种重要的编程范式，它将现实世界中的事物抽象为程序中的对象，通过对象之间的交互来解决问题。在这篇文章中，我们将介绍面向对象编程的基本概念、核心原则和应用场景。 一、什么是面向对象编程？ 面向对象编程是一种以对象为中心的编程思想，它将数据（属性）和操作数据的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象编程基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-24T07:40:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GahooChan\\",\\"url\\":\\"https://gitee.com/GahooChan\\"}]}"],["meta",{"property":"og:url","content":"https://GahooChan.github.io/GahooChanBlog/programming-languages/common-concepts/02-object-oriented-programming.html"}],["meta",{"property":"og:site_name","content":"GahooChan的个人博客"}],["meta",{"property":"og:title","content":"面向对象编程基础"}],["meta",{"property":"og:description","content":"面向对象编程基础 面向对象编程（Object-Oriented Programming，OOP）是一种重要的编程范式，它将现实世界中的事物抽象为程序中的对象，通过对象之间的交互来解决问题。在这篇文章中，我们将介绍面向对象编程的基本概念、核心原则和应用场景。 一、什么是面向对象编程？ 面向对象编程是一种以对象为中心的编程思想，它将数据（属性）和操作数据的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T07:40:36.000Z"}],["meta",{"property":"article:tag","content":"编程基础"}],["meta",{"property":"article:published_time","content":"2025-09-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T07:40:36.000Z"}]]},"git":{"createdTime":1758547865000,"updatedTime":1758699636000,"contributors":[{"name":"GahooChen","username":"GahooChen","email":"2432168423@qq.com","commits":1,"url":"https://github.com/GahooChen"},{"name":"GahooChan","username":"GahooChan","email":"2432168423@qq.com","commits":1,"url":"https://github.com/GahooChan"}]},"readingTime":{"minutes":9.88,"words":2963},"filePathRelative":"programming-languages/common-concepts/02-object-oriented-programming.md","excerpt":"\\n<p>面向对象编程（Object-Oriented Programming，OOP）是一种重要的编程范式，它将现实世界中的事物抽象为程序中的对象，通过对象之间的交互来解决问题。在这篇文章中，我们将介绍面向对象编程的基本概念、核心原则和应用场景。</p>\\n<h2>一、什么是面向对象编程？</h2>\\n<p>面向对象编程是一种以对象为中心的编程思想，它将数据（属性）和操作数据的方法（函数）封装在一个对象中，使对象成为程序的基本构建块。在面向对象编程中，我们关注的是<strong>谁来完成任务</strong>，而不仅仅是<strong>如何完成任务</strong>。</p>\\n<p>面向对象编程的核心是对象，对象是对现实世界中事物的抽象，它具有：</p>","autoDesc":true}')}}]);